<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Grafana + Loki + Promtail + Prometheus + AlertManager 搭建附带钉钉通知的日志收集、主机监控系统</title>
      <link href="//grafana-loki-promtail-prometheus-alertmanager-dingtalk.html"/>
      <url>//grafana-loki-promtail-prometheus-alertmanager-dingtalk.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>目前学校在申请二级等保认证，这其中就有一项日志记录，而学校因为历史原因，所使用的业务很繁杂，系统也多样化，我来了后虽然改了一部分，但依然因为费用的原因，导致没有专门的日志系统，这也就导致在认证时采集日志的工作变得极为复杂。</p><p>于是乎，为了解决这一问题，心里就在此浮现了搭建专用的日志采集系统的想法，正好之前有一台服务器被我改成了 <a href="https://proxmox.com/en/">Proxmox</a>，部分小业务一直跑在上面，于是这次就在这台服务器上开个虚拟机，专门用来采集日志。</p><span id="more"></span><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>本次搭建环境如下：</p><table><thead><tr><th align="center">序号</th><th align="center">IP地址</th><th align="center">操作系统</th><th align="center">安装软件 ｜ 用途</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">192.168.10.1</td><td align="center">Alpine</td><td align="center">全套</td></tr><tr><td align="center">2</td><td align="center">192.168.10.2</td><td align="center">Ubuntu</td><td align="center">Promtail + Node Exporter</td></tr></tbody></table><h2 id="主服务器搭建"><a href="#主服务器搭建" class="headerlink" title="主服务器搭建"></a>主服务器搭建</h2><h3 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h3><p>本着资源最小化的原则，直接采用了 <a href="https://alpinelinux.org/">Alpine</a> 操作系统，只有几兆的大小，资源占用那叫一个小啊。</p><p>同时，将几个软件整合在整个系统中，使用 <a href="https://grafana.com/">Grafana</a> 作为面板查看各项数据，<a href="https://github.com/grafana/loki">Loki</a> 作为日志收集系统，<a href="https://prometheus.io/">Prometheus</a> 主机监控，<a href="https://github.com/prometheus/alertmanager">AlertManager</a> 用于系统告警，<a href="https://prometheus.io/">Prometheus</a> 的第三方钉钉插件用于对接钉钉报警。</p><p>系统正常开启并更新后，执行命令安装必要组件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apk <span class="token function">add</span> <span class="token function">curl</span> <span class="token function">wget</span> libc6-compat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建必要的数据存储目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/grafana<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/loki/chunks<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/loki/rules<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/prometheus<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/alertmanager<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/dingtalk<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/promtail<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/loki<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/promtail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建各服务所需的用户，这里不为 <a href="https://github.com/grafana/loki">Promtail</a> 创建用户，是因为 <a href="https://github.com/grafana/loki">Promtail</a> 在提交日志时，需要提交一些系统日志，使用独立用户会导致因权限问题无法提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">addgroup <span class="token parameter variable">-S</span> grafanaaddgroup <span class="token parameter variable">-S</span> lokiaddgroup <span class="token parameter variable">-S</span> prometheusaddgroup <span class="token parameter variable">-S</span> alertmanageraddgroup <span class="token parameter variable">-S</span> dingtalkadduser <span class="token parameter variable">-S</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-G</span> grafana grafanaadduser <span class="token parameter variable">-S</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-G</span> loki lokiadduser <span class="token parameter variable">-S</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-G</span> prometheus prometheusadduser <span class="token parameter variable">-S</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-G</span> alertmanager alertmanageradduser <span class="token parameter variable">-S</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-G</span> dingtalk dingtalk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载所需各项软件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://dl.grafana.com/enterprise/release/grafana-enterprise-11.4.0.linux-amd64.tar.gz<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://github.com/grafana/loki/releases/download/v3.3.1/loki-linux-amd64.zip<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://github.com/grafana/loki/releases/download/v3.3.1/promtail-linux-amd64.zip<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://github.com/prometheus/prometheus/releases/download/v2.53.3/prometheus-2.53.3.linux-amd64.tar.gz<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Grafana-搭建"><a href="#Grafana-搭建" class="headerlink" title="Grafana 搭建"></a>Grafana 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxf grafana-enterprise-11.4.0.linux-amd64.tar.gz<span class="token function">mv</span> grafana-v11.4.0 /opt/grafana<span class="token function">cat</span> <span class="token operator">></span> /opt/grafana/conf/config.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[paths]data = /data/grafana/datalogs = /data/grafana/logplugins = /opt/grafana/pluginsprovisioning = /opt/grafana/conf/provisioningEOF</span><span class="token function">cat</span> <span class="token operator">></span> /etc/init.d/grafana <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/sbin/openrc-runname="grafana"description="Grafana Server"command="/opt/grafana/bin/grafana server -- --config /opt/grafana/conf/config.ini"pidfile=/data/grafana/run.pidlogfile=/data/grafana/<span class="token variable">$name</span>.logworkdir=/opt/grafanauser=grafanadepend() &#123;  need net localmount  after firewall&#125;start_pre() &#123;  ebegin "Preparing to start <span class="token variable">$name</span>"  eend <span class="token variable">$?</span>&#125;start() &#123;  ebegin "Starting <span class="token variable">$name</span>"  start-stop-daemon --start --quiet --background --name grafana --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stdout <span class="token variable">$logfile</span> --chdir <span class="token variable">$workdir</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;stop() &#123;  ebegin "Stopping <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  if [ -e <span class="token variable">$pidfile</span> ]    then rm <span class="token variable">$pidfile</span>  fi  eend <span class="token variable">$?</span>&#125;restart() &#123;  ebegin "Restarting <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  sleep 1  start-stop-daemon --start --quiet --background --name grafana --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stdout <span class="token variable">$logfile</span> --chdir <span class="token variable">$workdir</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;EOF</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> grafana:grafana /opt/grafana<span class="token function">chown</span> <span class="token parameter variable">-R</span> grafana:grafana /data/grafana<span class="token function">chmod</span> +x /etc/init.d/grafanarc-update <span class="token function">add</span> grafana default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Loki-搭建"><a href="#Loki-搭建" class="headerlink" title="Loki 搭建"></a>Loki 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token function">unzip</span> loki-linux-amd64.zip<span class="token function">mv</span> loki-linux-amd64 /opt/loki/loki<span class="token function">cat</span> <span class="token operator">></span> /opt/loki/config.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFauth_enabled: falseserver:  http_listen_port: 3100common:  instance_addr: 0.0.0.0  path_prefix: /opt/loki  storage:    filesystem:      chunks_directory: /data/loki/chunks      rules_directory: /data/loki/rules  replication_factor: 1  ring:    kvstore:      store: inmemoryschema_config:  configs:    - from: 2020-10-24      store: tsdb      object_store: filesystem      schema: v13      index:        prefix: index_        period: 24hruler:  alertmanager_url: http://localhost:9093EOF</span><span class="token function">cat</span> <span class="token operator">></span> /etc/init.d/loki <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/sbin/openrc-runname="loki"description="Grafana Loki"command="/opt/loki/loki -- -config.file /opt/loki/config.yaml"pidfile=/data/loki/run.pidlogfile=/data/loki/<span class="token variable">$name</span>.loguser=lokidepend() &#123;  need net localmount  after firewall&#125;start_pre() &#123;  ebegin "Preparing to start <span class="token variable">$name</span>"  eend <span class="token variable">$?</span>&#125;start() &#123;  ebegin "Starting <span class="token variable">$name</span>"  start-stop-daemon --start --quiet --background --name loki --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;stop() &#123;  ebegin "Stopping <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  if [ -e <span class="token variable">$pidfile</span> ]    then rm <span class="token variable">$pidfile</span>  fi  eend <span class="token variable">$?</span>&#125;restart() &#123;  ebegin "Restarting <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  sleep 1  start-stop-daemon --start --quiet --background --name loki --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;EOF</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> loki:loki /opt/loki<span class="token function">chown</span> <span class="token parameter variable">-R</span> loki:loki /data/loki<span class="token function">chmod</span> +x /etc/init.d/lokirc-update <span class="token function">add</span> loki default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Prometheus-搭建"><a href="#Prometheus-搭建" class="headerlink" title="Prometheus 搭建"></a>Prometheus 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token function">tar</span> zxf prometheus-2.53.3.linux-amd64.tar.gz<span class="token function">mv</span> prometheus-2.53.3.linux-amd64 /opt/prometheus<span class="token function">cat</span> <span class="token operator">></span> /opt/prometheus/config.yml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFglobal:  scrape_interval: 15s  evaluation_interval: 15salerting:  alertmanagers:    - static_configs:        - targets:          - localhost:9093rule_files:  - "alert_rules.yml"scrape_configs:  - job_name: "EKS"    static_configs:      - targets: ["localhost:9090"]        labels:          instance: EKS  - job_name: "JW"    static_configs:      - targets: ['192.168.10.2:9104']        labels:          instance: JWEOF</span><span class="token function">cat</span> <span class="token operator">></span> /opt/prometheus/alert_rules.yml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFgroups:  - name: alert_rules    rules:      - alert: CPU使用告警        expr: sum(avg(irate(node_cpu_seconds_total&#123;mode!='idle'&#125;[5m])) without (cpu)) by (instance) > 0.60        for: 2m        labels:          level: warning        annotations:          summary: "主机 &#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; CPU 使用过高"          description: "&#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; CPU 使用率超过 60% (current value: &#123;&#123; <span class="token variable">$value</span> &#125;&#125;)"      - alert: CPU使用严重告警        expr: (100 - (avg by (instance) (irate(node_cpu_seconds_total&#123;job=~".*",mode="idle"&#125;[5m])) * 100)) > 85        for: 3m        labels:          level: serious        annotations:          summary: "主机 &#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; CPU 使用高"          description: "&#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; CPU 使用率超过 85% (current value: &#123;&#123; <span class="token variable">$value</span> &#125;&#125;)"      - alert: 内存使用告警        expr: avg by(instance) <span class="token variable"><span class="token punctuation">((</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>node_memory_MemFree_bytes <span class="token operator">+</span> node_memory_Buffers_bytes <span class="token operator">+</span> node_memory_Cached_bytes<span class="token punctuation">)</span> <span class="token operator">/</span> node_memory_MemTotal_bytes<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">70</span>        for<span class="token operator">:</span> <span class="token number">2</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> warning        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123; $labels.instance &#125;&#125; 内存使用过高"          description<span class="token operator">:</span> "&#123;&#123;$labels.instance&#125;&#125;<span class="token operator">:</span> 内存使用率超过 <span class="token number">70</span><span class="token operator">%</span> <span class="token punctuation">(</span>current value is<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 内存使用严重告警        expr<span class="token operator">:</span> <span class="token punctuation">(</span>node_memory_MemTotal_bytes <span class="token operator">-</span> node_memory_MemAvailable_bytes<span class="token punctuation">)</span><span class="token operator">/</span>node_memory_MemTotal_bytes <span class="token operator">></span> <span class="token number">0.90</span>        for<span class="token operator">:</span> <span class="token number">3</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> serious        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123; $labels.instance &#125;&#125; 内存使用高"          description<span class="token operator">:</span> "&#123;&#123; $labels.instance &#125;&#125; 内存使用率超过 <span class="token number">90</span><span class="token operator">%</span> <span class="token punctuation">(</span>current value<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 硬盘使用告警        expr<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> node_filesystem_free_bytes&#123;fstype<span class="token operator">!=</span>"rootfs"<span class="token punctuation">,</span>mountpoint<span class="token operator">!=</span>""<span class="token punctuation">,</span>mountpoint<span class="token operator">!</span><span class="token operator">~</span>"<span class="token operator">/</span><span class="token punctuation">(</span>run<span class="token operator">|</span>var<span class="token operator">|</span>sys<span class="token operator">|</span>dev<span class="token punctuation">)</span>.<span class="token operator">*</span>"&#125; <span class="token operator">/</span> node_filesystem_size_bytes<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">></span> <span class="token number">80</span>        for<span class="token operator">:</span> <span class="token number">2</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> warning        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123; $labels.instance &#125;&#125; 硬盘使用过高"          description<span class="token operator">:</span> "&#123;&#123;$labels.instance&#125;&#125;<span class="token operator">:</span> 硬盘使用率超过 <span class="token number">80</span><span class="token operator">%</span> <span class="token punctuation">(</span>current value is<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 硬盘使用严重告警        expr<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> node_filesystem_free_bytes&#123;fstype<span class="token operator">!=</span>"rootfs"<span class="token punctuation">,</span>mountpoint<span class="token operator">!=</span>""<span class="token punctuation">,</span>mountpoint<span class="token operator">!</span><span class="token operator">~</span>"<span class="token operator">/</span><span class="token punctuation">(</span>run<span class="token operator">|</span>var<span class="token operator">|</span>sys<span class="token operator">|</span>dev<span class="token punctuation">)</span>.<span class="token operator">*</span>"&#125; <span class="token operator">/</span> node_filesystem_size_bytes<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">></span> <span class="token number">90</span>        for<span class="token operator">:</span> <span class="token number">3</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> serious        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123; $labels.instance &#125;&#125; 硬盘使用高"          description<span class="token operator">:</span> "&#123;&#123;$labels.instance&#125;&#125;<span class="token operator">:</span> 硬盘使用率超过 <span class="token number">90</span><span class="token operator">%</span> <span class="token punctuation">(</span>current value is<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 节点文件描述符告警        expr<span class="token operator">:</span> avg by <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">(</span>node_filefd_allocated&#123;&#125; <span class="token operator">/</span> node_filefd_maximum&#123;&#125;<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">></span> <span class="token number">60</span>        for<span class="token operator">:</span> <span class="token number">2</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> warning        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123; $labels.instance &#125;&#125; 文件描述符使用高"          description<span class="token operator">:</span> "&#123;&#123;$labels.instance&#125;&#125;<span class="token operator">:</span> 文件描述符使用超过 <span class="token number">60</span><span class="token operator">%</span> <span class="token punctuation">(</span>current value is<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 节点平均负载告警        expr<span class="token operator">:</span> avg by <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">(</span>node_load15&#123;&#125;<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">80</span>        for<span class="token operator">:</span> <span class="token number">2</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> warning        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123; $labels.instance &#125;&#125; <span class="token number">15</span> 分钟平均负载高"          description<span class="token operator">:</span> "&#123;&#123;$labels.instance&#125;&#125;<span class="token operator">:</span> <span class="token number">15</span> 分钟平均负载超过 <span class="token number">80</span> <span class="token punctuation">(</span>current value is<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 节点离线告警        expr<span class="token operator">:</span> avg by <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">(</span>up&#123;&#125;<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>        for<span class="token operator">:</span> <span class="token number">2</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> warning        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123;$labels.instance&#125;&#125; 当前离线"          description<span class="token operator">:</span> "&#123;&#123;$labels.instance&#125;&#125;<span class="token operator">:</span> Node_Exporter 代理已断开 <span class="token punctuation">(</span>current value is<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 节点进程阻塞告警        expr<span class="token operator">:</span> avg by <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">(</span>node_procs_blocked&#123;&#125;<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span>        for<span class="token operator">:</span> <span class="token number">2</span>m        labels<span class="token operator">:</span>          level<span class="token operator">:</span> warning        annotations<span class="token operator">:</span>          summary<span class="token operator">:</span> "主机 &#123;&#123; $labels.instance &#125;&#125;  进程阻塞过高"          description<span class="token operator">:</span> "&#123;&#123;$labels.instance&#125;&#125;<span class="token operator">:</span> 检测到进程阻塞超过 <span class="token number">10</span> <span class="token punctuation">(</span>current value is<span class="token operator">:</span> &#123;&#123; $value &#125;&#125;<span class="token punctuation">)</span>"      <span class="token operator">-</span> alert<span class="token operator">:</span> 网络上传告警        expr<span class="token operator">:</span>  avg by <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">(</span>floor<span class="token punctuation">(</span>irate<span class="token punctuation">(</span>node_network_transmit_bytes_total&#123;&#125;[<span class="token number">2</span>m]<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token punctuation">))</span></span> > 40        for: 1m        labels:          level: warning        annotations:          summary: "主机 &#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; 网络上传过高"          description: "&#123;&#123;<span class="token variable">$labels</span>.instance&#125;&#125;: 节点上传速率超过 40Mbps/s (current value is: &#123;&#123; <span class="token variable">$value</span> &#125;&#125;Mbps/s)"      - alert: 网络下载告警        expr:  avg by (instance) (floor(irate(node_network_receive_bytes_total&#123;&#125;[2m]) / 1024 / 1024 * 8 )) > 40        for: 1m        labels:          level: warning        annotations:          summary: "Instance &#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; 网络下载过高"          description: "&#123;&#123;<span class="token variable">$labels</span>.instance&#125;&#125;: 节点下载速率超过 40Mbps/s (current value is: &#123;&#123; <span class="token variable">$value</span> &#125;&#125;Mbps/s)"      - alert: 磁盘读取告警        expr: avg by (instance) (floor(irate(node_disk_read_bytes_total&#123;&#125;[2m]) / 1024 )) > 5000        for: 10m        labels:          level: warning        annotations:          summary: "主机 &#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; 磁盘读取速率过高"          description: "&#123;&#123;<span class="token variable">$labels</span>.instance&#125;&#125;: 节点磁盘读取速率超过 5000KB/s (current value is: &#123;&#123; <span class="token variable">$value</span> &#125;&#125;KB/s)"      - alert: 磁盘写入告警        expr: avg by (instance) (floor(irate(node_disk_written_bytes_total&#123;&#125;[2m]) / 1024 / 1024 )) > 200        for: 2m        labels:          level: warning        annotations:          summary: "主机 &#123;&#123; <span class="token variable">$labels</span>.instance &#125;&#125; 磁盘写入速率过高"          description: "&#123;&#123;<span class="token variable">$labels</span>.instance&#125;&#125;: 节点磁盘写入速率超过 20MB/s (current value is: &#123;&#123; <span class="token variable">$value</span> &#125;&#125;MB/s)"EOF</span><span class="token function">cat</span> <span class="token operator">></span> /etc/init.d/prometheus <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/sbin/openrc-runname="prometheus"description="Prometheus Server"command="/opt/prometheus/prometheus -- --config.file=/opt/prometheus/config.yml --web.enable-remote-write-receiver --storage.tsdb.path=/opt/prometheus/data"pidfile=/data/prometheus/run.pidlogfile=/data/prometheus/<span class="token variable">$name</span>.loguser=prometheusdepend() &#123;  need net localmount  after firewall&#125;start_pre() &#123;  ebegin "Preparing to start <span class="token variable">$name</span>"  eend <span class="token variable">$?</span>&#125;start() &#123;  ebegin "Starting <span class="token variable">$name</span>"  start-stop-daemon --start --quiet --background --name prometheus --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;stop() &#123;  ebegin "Stopping <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  if [ -e <span class="token variable">$pidfile</span> ]    then rm <span class="token variable">$pidfile</span>  fi  eend <span class="token variable">$?</span>&#125;restart() &#123;  ebegin "Restarting <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  sleep 1  start-stop-daemon --start --quiet --background --name prometheus --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;EOF</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> prometheus:prometheus /opt/prometheus<span class="token function">chown</span> <span class="token parameter variable">-R</span> prometheus:prometheus /data/prometheus<span class="token function">chmod</span> +x /etc/init.d/prometheusrc-update <span class="token function">add</span> prometheus default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AlertManager-搭建"><a href="#AlertManager-搭建" class="headerlink" title="AlertManager 搭建"></a>AlertManager 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxf alertmanager-0.27.0.linux-amd64.tar.gz<span class="token function">mv</span> alertmanager-0.27.0.linux-amd64 /opt/alertmanager<span class="token function">cat</span> <span class="token operator">></span> /opt/alertmanager/config.yml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFroute:  group_by: ['alertname']  group_wait: 10s  group_interval: 10s  repeat_interval: 1m  receiver: 'dingtalk'receivers:  - name: 'web.hook'    webhook_configs:      - url: 'http://127.0.0.1:5001/'  - name: 'dingtalk'    webhook_configs:      - url: http://localhost:8060/dingtalk/webhook_mention_users/send        send_resolved: trueinhibit_rules:  - source_match:      severity: 'critical'    target_match:      severity: 'warning'    equal: ['alertname', 'dev', 'instance']EOF</span><span class="token function">cat</span> <span class="token operator">></span> /etc/init.d/alertmanager <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/sbin/openrc-runname="alertmanager"description="Prometheus AlertManager"command="/opt/alertmanager/alertmanager -- --config.file=/opt/alertmanager/config.yml --storage.path=/opt/alertmanager/data"pidfile=/data/alertmanager/run.pidlogfile=/data/alertmanager/<span class="token variable">$name</span>.loguser=alertmanagerdepend() &#123;  need net localmount  after firewall&#125;start_pre() &#123;  ebegin "Preparing to start <span class="token variable">$name</span>"  eend <span class="token variable">$?</span>&#125;start() &#123;  ebegin "Starting <span class="token variable">$name</span>"  start-stop-daemon --start --quiet --background --name alertmanager --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;stop() &#123;  ebegin "Stopping <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  if [ -e <span class="token variable">$pidfile</span> ]    then rm <span class="token variable">$pidfile</span>  fi  eend <span class="token variable">$?</span>&#125;restart() &#123;  ebegin "Restarting <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  sleep 1  start-stop-daemon --start --quiet --background --name alertmanager --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;EOF</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> alertmanager:alertmanager /opt/alertmanager<span class="token function">chown</span> <span class="token parameter variable">-R</span> alertmanager:alertmanager /data/alertmanager<span class="token function">chmod</span> +x /etc/init.d/alertmanagerrc-update <span class="token function">add</span> alertmanager default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="钉钉告警搭建"><a href="#钉钉告警搭建" class="headerlink" title="钉钉告警搭建"></a>钉钉告警搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz<span class="token function">mv</span> prometheus-webhook-dingtalk-2.1.0.linux-amd64 /opt/dingtalk<span class="token function">mv</span> /opt/dingtalk/prometheus-webhook-dingtalk /opt/dingtalk/dingtalk<span class="token function">cat</span> <span class="token operator">></span> /opt/dingtalk/config.yml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFtimeout: 5stemplates:  - /opt/dingtalk/template.tmpltargets:  webhook_robot:    url: https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxx # 这里更换为自己的钉钉机器人apiEOF</span><span class="token function">cat</span> <span class="token operator">></span> /opt/dingtalk/template.tmpl <span class="token operator">&lt;&lt;</span> <span class="token string">EOF&#123;&#123; define "__subject" &#125;&#125;[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status "firing" &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;]&#123;&#123; end &#125;&#125;&#123;&#123; define "__alert_list" &#125;&#125;&#123;&#123; range . &#125;&#125;---&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125;**告警级别**: &#123;&#123; .Labels.severity &#125;&#125; **告警主机**: &#123;&#123; .Labels.instance &#125;&#125; **告警信息**: &#123;&#123; index .Annotations "description" &#125;&#125;**告警时间**: &#123;&#123; dateInZone "2006.01.02 15:04:05" (.StartsAt) "Asia/Shanghai" &#125;&#125;&#123;&#123; .Labels.Users &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; define "__resolved_list" &#125;&#125;&#123;&#123; range . &#125;&#125;---&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125; **告警级别**: &#123;&#123; .Labels.severity &#125;&#125;**告警主机**: &#123;&#123; .Labels.instance &#125;&#125;**告警信息**: &#123;&#123; index .Annotations "description" &#125;&#125;**告警时间**: &#123;&#123; dateInZone "2006.01.02 15:04:05" (.StartsAt) "Asia/Shanghai" &#125;&#125;**恢复时间**: &#123;&#123; dateInZone "2006.01.02 15:04:05" (.EndsAt) "Asia/Shanghai" &#125;&#125;&#123;&#123; .Labels.Users &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; define "default.title" &#125;&#125;&#123;&#123; template "__subject" . &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; define "default.content" &#125;&#125;&#123;&#123; if gt (len .Alerts.Firing) 0 &#125;&#125;&lt;font color="#FF0000" size="8" face="黑体">**====侦测到&#123;&#123; .Alerts.Firing | len  &#125;&#125;个故障====**&lt;/font>&#123;&#123; template "__alert_list" .Alerts.Firing &#125;&#125;---&#123;&#123; end &#125;&#125;&#123;&#123; if gt (len .Alerts.Resolved) 0 &#125;&#125;&lt;font color="#00FF00" size="8" face="黑体">**====恢复&#123;&#123; .Alerts.Resolved | len  &#125;&#125;个故障====**&lt;/font>&#123;&#123; template "__resolved_list" .Alerts.Resolved &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; define "ding.link.title" &#125;&#125;&#123;&#123; template "default.title" . &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; define "ding.link.content" &#125;&#125;&#123;&#123; template "default.content" . &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; template "default.title" . &#125;&#125;&#123;&#123; template "default.content" . &#125;&#125;EOF</span><span class="token function">cat</span> <span class="token operator">></span> /etc/init.d/dingtalk <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/sbin/openrc-runname="dingtalk"description="Prometheus Webhook DingTalk"command="/opt/dingtalk/dingtalk -- --config.file=/opt/dingtalk/config.yml --web.listen-address=":8060" --web.enable-ui --web.enable-lifecycle --log.format=json"pidfile=/data/dingtalk/run.pidlogfile=/data/dingtalk/<span class="token variable">$name</span>.loguser=dingtalkdepend() &#123;  need net localmount  after firewall&#125;start_pre() &#123;  ebegin "Preparing to start <span class="token variable">$name</span>"  eend <span class="token variable">$?</span>&#125;start() &#123;  ebegin "Starting <span class="token variable">$name</span>"  start-stop-daemon --start --quiet --background --name dingtalk --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;stop() &#123;  ebegin "Stopping <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  if [ -e <span class="token variable">$pidfile</span> ]    then rm <span class="token variable">$pidfile</span>  fi  eend <span class="token variable">$?</span>&#125;restart() &#123;  ebegin "Restarting <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  sleep 1  start-stop-daemon --start --quiet --background --name dingtalk --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --user <span class="token variable">$user</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;EOF</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> dingtalk:dingtalk /opt/dingtalk<span class="token function">chown</span> <span class="token parameter variable">-R</span> dingtalk:dingtalk /data/dingtalk<span class="token function">chmod</span> +x /etc/init.d/dingtalkrc-update <span class="token function">add</span> dingtalk default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promtail-搭建"><a href="#Promtail-搭建" class="headerlink" title="Promtail 搭建"></a>Promtail 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> promtail-linux-amd64.zip<span class="token function">mv</span> promtail-linux-amd64 /opt/promtail/promtail<span class="token function">cat</span> <span class="token operator">></span> /opt/promtail/config.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFserver:  http_listen_port: 9080  grpc_listen_port: 0positions:  filename: /data/promtail/positions.yamlclients:  - url: http://localhost:3100/loki/api/v1/pushscrape_configs:- job_name: EKS  static_configs:  - targets:      - localhost    labels:      job: "System Logs|EKS"      __path__: /var/log/messages  - targets:      - localhost    labels:      job: "Soft Logs|EKS"      __path__: /data/*/*logEOF</span><span class="token function">cat</span> <span class="token operator">></span> /etc/init.d/promtail <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/sbin/openrc-runname="promtail"description="Promtail"command="/opt/promtail/promtail -- --config.file=/opt/promtail/config.yaml"pidfile=/data/promtail/run.pidlogfile=/data/promtail/<span class="token variable">$name</span>.logdepend() &#123;  need net localmount  after firewall&#125;start_pre() &#123;  ebegin "Preparing to start <span class="token variable">$name</span>"  eend <span class="token variable">$?</span>&#125;start() &#123;  ebegin "Starting <span class="token variable">$name</span>"  start-stop-daemon --start --quiet --background --name promtail --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;stop() &#123;  ebegin "Stopping <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  if [ -e <span class="token variable">$pidfile</span> ]    then rm <span class="token variable">$pidfile</span>  fi  eend <span class="token variable">$?</span>&#125;restart() &#123;  ebegin "Restarting <span class="token variable">$name</span>"  start-stop-daemon --stop --quiet --pidfile <span class="token variable">$pidfile</span>  sleep 1  start-stop-daemon --start --quiet --background --name promtail --make-pidfile --pidfile <span class="token variable">$pidfile</span> --stderr <span class="token variable">$logfile</span> --exec <span class="token variable">$command</span>  eend <span class="token variable">$?</span>&#125;EOF</span><span class="token function">chmod</span> +x /etc/init.d/promtailrc-update <span class="token function">add</span> promtail default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动各项服务"><a href="#启动各项服务" class="headerlink" title="启动各项服务"></a>启动各项服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> grafana start<span class="token function">service</span> loki start<span class="token function">service</span> prometheus start<span class="token function">service</span> alertmanager start<span class="token function">service</span> dingtalk start<span class="token function">service</span> promtail start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端搭建"><a href="#客户端搭建" class="headerlink" title="客户端搭建"></a>客户端搭建</h2><h3 id="Promtail-搭建-1"><a href="#Promtail-搭建-1" class="headerlink" title="Promtail 搭建"></a>Promtail 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://github.com/grafana/loki/releases/download/v3.3.1/promtail-linux-amd64.zip<span class="token function">unzip</span> promtail-linux-amd64.zip<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/promtail<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/promtail<span class="token function">mv</span> promtail-linux-amd64 /opt/promtail/promtail<span class="token function">cat</span> /opt/promtail/config.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFserver:  http_listen_port: 9080  grpc_listen_port: 0positions:  filename: /data/promtail/positions.yamlclients:  - url: http://192.168.10.1:3100/loki/api/v1/pushscrape_configs:- job_name: MongoDB  static_configs:  - targets:      - localhost    labels:      job: "System Logs|MongoDB"      __path__: /var/log/*log  - targets:      - localhost    labels:      job: "MongoDB Logs|MongoDB"      __path__: /var/log/mongodb/*logEOF</span><span class="token function">cat</span> <span class="token operator">></span> /etc/systemd/system/promtail.service <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[Unit]Description=PromtailDocumentation=https://github.com/grafana/lokiAfter=network.target[Service]Type=simpleExecStart=/opt/promtail/promtail --config.file=/opt/promtail/config.yamlRestart=on-failure[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> promtail.servicesystemctl start promtail.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Node-Exporter-搭建"><a href="#Node-Exporter-搭建" class="headerlink" title="Node Exporter 搭建"></a>Node Exporter 搭建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token function">wget</span> <span class="token parameter variable">-c</span> https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz<span class="token function">tar</span> zxf node_exporter-1.8.2.linux-amd64.tar.gz<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/exporter<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/exporter<span class="token function">mv</span> node_exporter-1.8.2.linux-amd64 /opt/exporter<span class="token function">mv</span> /opt/exporter/node_exporter /opt/exporter/exporter<span class="token function">useradd</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-M</span> exporter<span class="token function">chown</span> <span class="token parameter variable">-R</span> exporter:exporter /data/exporter<span class="token function">chown</span> <span class="token parameter variable">-R</span> exporter:exporter /opt/exporter<span class="token function">cat</span> <span class="token operator">></span> /etc/systemd/system/exporter.service <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[Unit]Description=Prometheus Node ExporterAfter=network.target [Service]Restart=on-failureExecStart=/opt/exporter/exporter --web.listen-address=:9104 [Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> exporter.servicesystemctl start exporter.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面板使用"><a href="#面板使用" class="headerlink" title="面板使用"></a>面板使用</h2><p>打开 Grafana 面板并登陆：<code>http://192.168.10.1:3000</code>，默认账号密码为 <code>admin/admin</code></p><p><img src="https://cdn.free.gd/images/2024/12/01.5fknl4ex9c.avif" alt="01"></p><p>在个人资料中修改语言为中文</p><p><img src="https://cdn.free.gd/images/2024/12/02.73u0ib57fk.avif" alt="02"></p><p><img src="https://cdn.free.gd/images/2024/12/03.51e7u96me9.avif" alt="03"></p><p>找到左侧的数据源，并添加 Loki 及 Prometheus 两种数据源</p><p>Loki 的链接地址是 <a href="http://localhost:3100/">http://localhost:3100</a></p><p><img src="https://cdn.free.gd/images/2024/12/04.4ckya8j3dt.avif" alt="04"></p><p>Prometheus 的链接地址是 <a href="http://localhost:9090/">http://localhost:9090</a></p><p><img src="https://cdn.free.gd/images/2024/12/05.2dorjwdl29.avif" alt="05"></p><p>找到仪表板，添加一个新的仪表板</p><p><img src="https://cdn.free.gd/images/2024/12/06.60ub7f9dk2.avif" alt="06"></p><p><img src="https://cdn.free.gd/images/2024/12/07.5q7he9u5eq.avif" alt="07"></p><p>点击 “导入仪表板” —— “Discard”</p><p><img src="https://cdn.free.gd/images/2024/12/08.1ovhzvq21u.avif" alt="08"></p><p>在输入框中输入仪表板的编号后点击加载，加载完成后选择自己的 Prometheus 数据源，这里我用的是 8919，如果想要更多仪表板，可以看这里：<a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a></p><p><img src="https://cdn.free.gd/images/2024/12/09.175gbaoogz.avif" alt="09"></p><p>可在面板中看到监控主机的详细情况</p><p><img src="https://cdn.free.gd/images/2024/12/10.esktk82qr.avif" alt="10"></p><p>在左侧的 Logs 中可以查看日志信息，当然，还有一些诸如日志查询、搜索等功能，可以自己慢慢发现</p><p><img src="https://cdn.free.gd/images/2024/12/11.7pcy4lxb8.avif" alt="11"></p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> Grafana </tag>
            
            <tag> Loki </tag>
            
            <tag> Promtail </tag>
            
            <tag> Prometheus </tag>
            
            <tag> AlertManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt中OpenClash与AdGuardHome结合</title>
      <link href="//openwrt-openclash-adguardhome.html"/>
      <url>//openwrt-openclash-adguardhome.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>康诺家中一直使用OpenWrt搭配OpenClash无痛翻墙，效果一直很不错，不过由于当时编译的OpenWrt版本过老，再加上原有的OpenClash使用的是Redir-Host模式，本着折腾无极限的原则（其实主要是这几天有假期），准备对OpenWrt进行升级，也将OpenClash顺手调整为Fake-IP模式。</p><span id="more"></span><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><p>HP Gen8搭建Proxmox，创建了一个Ubuntu 22.04的LXC虚拟机作为OpenWrt编译环境，选择<a href="https://github.com/immortalwrt/immortalwrt.git%E4%BD%9C%E4%B8%BA%E7%BC%96%E8%AF%91%E5%9F%BA%E7%A1%80%E7%B3%BB%E7%BB%9F%EF%BC%8C%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC21.02%E3%80%82">https://github.com/immortalwrt/immortalwrt.git作为编译基础系统，编译版本21.02。</a></p><p>主路由插件：</p><blockquote><p>aliyundrive-webdav （阿里云盘挂载）<br>BaiduPCS-Web （百度盘下载）<br>Aria2 （下载工具）<br>cifs-mount （SMB共享挂载）</p></blockquote><p>旁路由插件：</p><blockquote><p>OpenClash （主角，科学上网工具）<br>wol （网络唤醒）<br>vlmcsd （KMS激活服务器）</p></blockquote><p>共有插件：</p><blockquote><p>Upnp （PT这些需要用到）<br>frpc （内网暴露）<br>statistics （流量统计）<br>autoreboot （定时重启）<br>turboacc （网络加速）<br>ramfree （内存释放）</p></blockquote><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>使用R86S安装Proxmox，在其中创建两个KVM（100、101）和一个LXC（102）</p><blockquote><p>KVM-100安装主路由，使用两个网口，一个拨号，一个内网，IP: 10.9.8.1<br>KVM-101安装旁路由，使用一个网口，IP: 10.9.8.2<br>LXC-102安装AdGuardHome，IP: 10.9.8.3</p></blockquote><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>主路由配置不再多说，主要是拨号上网，开启IPv6以及DHCP等。</p><h3 id="旁路由配置"><a href="#旁路由配置" class="headerlink" title="旁路由配置"></a>旁路由配置</h3><p>配置网关地址为主路由地址</p><p><img src="https://cdn.free.gd/images/2023/07/01.1028fup31h.avif" alt="01"></p><p>配置DNS为阿里云DNS</p><p><img src="https://cdn.free.gd/images/2023/07/02.26ljogdzmu.avif" alt="02"></p><p>关闭DHCP</p><p><img src="https://cdn.free.gd/images/2023/07/03.pfemp9uw7.avif" alt="03"></p><p><img src="https://cdn.free.gd/images/2023/07/04.73u0iarrfr.avif" alt="04"></p><p>禁止IPv6分配</p><p><img src="https://cdn.free.gd/images/2023/07/05.4qre13dy94.avif" alt="05"></p><h3 id="OpenClash配置"><a href="#OpenClash配置" class="headerlink" title="OpenClash配置"></a>OpenClash配置</h3><p>首先保证上一步已操作完成，旁路由可正常联网，同时确认下自己网络是否可以正常访问github，若不可以，则进行下一步，否则可跳过本步骤</p><h3 id="Github-地址修改"><a href="#Github-地址修改" class="headerlink" title="Github 地址修改"></a>Github 地址修改</h3><p>进入 OpenClash -&gt; 覆写设置 -&gt; 常规设置 -&gt; Github 地址修改，将地址修改为 <a href="https://ghproxy.com/%EF%BC%8C%E5%BD%93%E7%84%B6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%94%B9%E4%B8%BA%E5%85%B6%E4%BB%96">https://ghproxy.com/，当然也可以改为其他</a></p><p><img src="https://cdn.free.gd/images/2023/07/06.45hqesjhyh.avif" alt="06"></p><h3 id="更新内核"><a href="#更新内核" class="headerlink" title="更新内核"></a>更新内核</h3><p>进入 OpenClash -&gt; 插件设置 -&gt; 版本更新，将所有没安装的内核安装下</p><p><img src="https://cdn.free.gd/images/2023/07/07.45r0efeln.avif" alt="07"></p><h3 id="OpenClash配置-1"><a href="#OpenClash配置-1" class="headerlink" title="OpenClash配置"></a>OpenClash配置</h3><p>插件设置中，将模式切换为”Fake-IP”模式，其他配置看图</p><p><img src="https://cdn.free.gd/images/2023/07/08.9kg8x7yncd.avif" alt="08"></p><p>DNS设置中，将DNS劫持禁用</p><p><img src="https://cdn.free.gd/images/2023/07/09.7p3o4lm7qm.avif" alt="09"></p><p>覆写设置中，DNS设置部分开启自定义上游DNS，并开启持久化</p><p><img src="https://cdn.free.gd/images/2023/07/10.9nzuuxrq27.avif" alt="10"></p><p>配置本地DNS及国外DNS，这里选择阿里云DNS和CloudFlare</p><p><img src="https://cdn.free.gd/images/2023/07/11.4qre13dy9c.avif" alt="11"></p><p><img src="https://cdn.free.gd/images/2023/07/12.2obld1fd80.avif" alt="12"></p><p>最后一步，将 网络 -&gt; DHCP&#x2F;DNS -&gt; DNS 转发 配置为OpenClash的DNS</p><p><img src="https://cdn.free.gd/images/2023/07/13.8adbqwgo1d.avif" alt="13"></p><h3 id="AdGuardHome配置"><a href="#AdGuardHome配置" class="headerlink" title="AdGuardHome配置"></a>AdGuardHome配置</h3><p>其实没什么好说的，只需要把上游DNS配置为旁路由DNS即可</p><p><img src="https://cdn.free.gd/images/2023/07/14.1sf3xl5os2.avif" alt="14"></p><p>最后，将设备DNS替换为AdGuardHome的DNS，使用nslookup测试下，分别测试国内域名与国外域名，国内域名应该为真实IP，国外域名为内网IP即可</p><p><img src="https://cdn.free.gd/images/2023/07/15.6bh50kb5pu.avif" alt="15"></p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWrt </tag>
            
            <tag> OpenClash </tag>
            
            <tag> AdGuardHome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeBSD下安装iRedMail搭建自己的邮件服务器</title>
      <link href="//freebsd-install-iredmail.html"/>
      <url>//freebsd-install-iredmail.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>对于很多站长来说，拥有一个属于自己的域名邮箱是一件理所当然的事，而对于域名邮箱，一般来说是直接使用各大服务商提供的服务，比如 腾讯云、阿里云、或者 Google 等等，但是否想过搭建一个属于自己的私人域名邮箱服务器呢？</p><p>本文将讲解如何在自己的服务器上搭建一个属于自己的邮件服务器，本次选择使用 <a href="https://freebsd.org/">FreeBSD</a> 作为服务器，使用 <a href="https://www.iredmail.org/">iRedMail</a> 作为搭建程序。</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在开始搭建前，请先确认您具备了以下条件：</p><blockquote><ol><li>一台服务器或VPS（最低 2GB 内存）</li><li>一个拥有管理权限的域名</li><li>一个独立的公网 IPv4 地址（支持设置 rDNS 解析）</li><li>一定的命令行操作基础</li></ol></blockquote><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>本次操作，依然在 Proxmox 内进行，由于 FreeBSD 属于 Unix 类系统，所以无法在 Proxmox 中直接以 LXC 方式创建，需要创建为 KVM，首先将 FreeBSD 镜像下载到 Proxmox 服务器 &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso 目录中，随后跟着下面图示开始创建虚拟机。</p><p>选择下载的 FreeBSD 安装镜像文件，并设置类型为 Other</p><p>选择硬盘总线设备为 VirtIO，其余设置请根据自身需求进行设置，这里推荐内存最低 4GB 以上。</p><p>配置完成后可启动虚拟机，进入安装引导，安装过程略过，注意设置自己的主机名为 mail.free.gd 或 mx.free.gd 这样的格式，不要直接使用根域名</p><p>重启完成安装，并登录系统执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">portsnap fetch extract updatepkg <span class="token function">install</span> bash-static<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="iRedMail-搭建"><a href="#iRedMail-搭建" class="headerlink" title="iRedMail 搭建"></a>iRedMail 搭建</h2><p>确认自己的主机名称设置正确</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">hostname</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看结果是否为自己配置的主机名称，如 mail.free.gd，若不是，请修改 &#x2F;etc&#x2F;rc.conf，内容为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">hostname</span><span class="token operator">=</span><span class="token string">"mail.domain.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载最新版 iRedMail 安装程序并启动安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fetch https://github.com/iredmail/iRedMail/archive/1.3.2.tar.gz<span class="token function">tar</span> zxf <span class="token number">1.3</span>.2.tar.gz<span class="token builtin class-name">cd</span> iRedMail-1.3.2/<span class="token function">bash</span> iRedMail.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示完成配置，由于安装时忘记截图，这里直接使用官方的图片</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/01.8adbqvvovm.avif" alt="01"></p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/02.73u0ia6saa.avif" alt="02"></p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/03.9rjgsmztma.avif" alt="03"></p><p>这里可设置为根域名</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/04.9gwmzhklgz.avif" alt="04"></p><p>默认管理员帐号为 <a href="mailto:&#x70;&#x6f;&#115;&#x74;&#109;&#x61;&#x73;&#116;&#x65;&#114;&#64;&#x64;&#111;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#99;&#x6f;&#x6d;">&#x70;&#x6f;&#115;&#x74;&#109;&#x61;&#x73;&#116;&#x65;&#114;&#64;&#x64;&#111;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#99;&#x6f;&#x6d;</a> 且无法修改（domain.com 为您刚才设置的邮件域名）</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/05.67xj2tx3ub.avif" alt="05"></p><p>FreeBSD 版本只有 iRedAdmin、Roundcubemail、SOGo</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/06.7zqhxqggqb.avif" alt="06"></p><p>输入 y 确认安装</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/07.3gogurazsk.avif" alt="07"></p><p>完成后重启服务器</p><h2 id="解析设置"><a href="#解析设置" class="headerlink" title="解析设置"></a>解析设置</h2><p>此时您已经完成了系统的搭建，若尝试发送或接收邮件，会发现无法实现，这是因为咱们还没有完成域名解析的工作。</p><p>此处以一下数据作为演示：</p><blockquote><p>根域名 free.gd<br>邮件域名 mail.free.gd<br>公网地址 104.216.2.154</p></blockquote><h3 id="rDNS-解析"><a href="#rDNS-解析" class="headerlink" title="rDNS 解析"></a>rDNS 解析</h3><p>rDNS 解析也就是 PTR，此项解析是针对 IP 地址的，需要您的服务器或 VPS 服务商提供此功能才可设置，而设置 rDNS 的作用是为了避免邮件被判定为垃圾邮件。</p><p>设置方法就是根据服务商提示自己手动配置或直接要求服务商帮忙配置，检测方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> <span class="token parameter variable">-x</span> <span class="token number">104.216</span>.2.154 @8.8.8.8<span class="token function">nslookup</span> <span class="token number">104.216</span>.2.154 <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="A-记录"><a href="#A-记录" class="headerlink" title="A 记录"></a>A 记录</h3><p>将 mail.free.gd 的 A 记录指向 104.216.2.154，检测方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> mail.free.gd @8.8.8.8<span class="token function">nslookup</span> mail.free.gd <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="MX-记录"><a href="#MX-记录" class="headerlink" title="MX 记录"></a>MX 记录</h3><p>MX 记录就是邮件的解析记录，非常重要的一条记录，配置根域名的 MX 记录为自己的邮件域名地址，优先级为 10，检测方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> free.gd MX +noall +answer @8.8.8.8<span class="token function">nslookup</span> <span class="token parameter variable">-type</span><span class="token operator">=</span>mx free.gd <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="SPF-记录"><a href="#SPF-记录" class="headerlink" title="SPF 记录"></a>SPF 记录</h3><p>SPF 记录是为了防止垃圾邮件而设定的，告知收件方，从设置的允许列表中发出的邮件都是合法的，设置方式为添加一条根域名的 TXT 解析记录，内容为 v&#x3D;spf1 mx ~all，检测方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> <span class="token parameter variable">-t</span> txt free.gd @8.8.8.8<span class="token function">nslookup</span> <span class="token parameter variable">-type</span><span class="token operator">=</span>txt free.gd <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="DKIM-解析"><a href="#DKIM-解析" class="headerlink" title="DKIM 解析"></a>DKIM 解析</h3><p>DKIM 可说是避免被判定为垃圾邮件的一大利器，DKIM 属于一种类似加密签名的解析记录，只有包含此加密数据，且公钥与密钥相匹配才属于合法邮件，要设置 DKIM 记录，首先要查询 DKIM 信息，在系统中执行命令查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">amavisd showkeys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到这样一组数据</p><blockquote><p>; key#1 2048 bits, i&#x3D;dkim, d&#x3D;free.gd, &#x2F;var&#x2F;lib&#x2F;dkim&#x2F;free.gd.pem<br>dkim._domainkey.free.gd. 3600 TXT ( “v&#x3D;DKIM1; p&#x3D;”<br>“MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAviCll3+5qwbprg4QdQPe”<br>“vjYzUm6w8s7hM875GNfUlDmTmDzr53yCZ645&#x2F;DZZKGssWZ8Dx1HLhzyUz&#x2F;QSIYG0”<br>“G987P3SReVutztxWoau1pmdgJ4FxWHdrChsB6Nwlu6hJqAQFe4dxoQ4r0z9SH0mT”<br>“i6LnlL+Efzlt1vF6VHfTlRxkxgOXfXyOCg4ZaDjL5&#x2F;+&#x2F;WXSgYWoW53iV8TzWlaPu”<br>“KQ+7LJ0w8AM0iBYN1px3fX2fxIAi7Ogakv1L2EMAwQZ&#x2F;YOxN9tjUKFFOUpJHtXR9”<br>“LVHn46E3QCYH7T2dub3isjndUu4DirX0boG8u1WV8ipXVc1yl6q9M94I0HROOb+U”<br>“2QIDAQAB”)</p></blockquote><p>将括号内的文本去除引号与空格并相连就是咱们的 DKIM 数据，在解析中添加一条 dkim._domainkey 的 TXT 解析，内容就是咱们组合出的文本传，测试方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> <span class="token parameter variable">-t</span> txt dkim._domainkey.free.gd @8.8.8.8<span class="token function">nslookup</span> <span class="token parameter variable">-type</span><span class="token operator">=</span>txt dkim._domainkey.free.gd <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="DMARC-记录"><a href="#DMARC-记录" class="headerlink" title="DMARC 记录"></a>DMARC 记录</h3><p>DMARC 记录是当收件方检测到伪造邮件等行为时，将根据您的配置进行操作的一个记录，比如拒绝邮件或放入垃圾邮件以及不做处理等，同时会反馈一份检测报告到配置的邮箱地址内，添加方法就是增加一条 _dmarc 的 TXT 解析，内容为配置选项，比如 v&#x3D;DMARC1; p&#x3D;none; rua&#x3D;mailto:<a href="mailto:&#100;&#109;&#x61;&#x72;&#99;&#x40;&#102;&#114;&#101;&#101;&#x2e;&#103;&#x64;">&#100;&#109;&#x61;&#x72;&#99;&#x40;&#102;&#114;&#101;&#101;&#x2e;&#103;&#x64;</a>，检测方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dig</span> <span class="token parameter variable">-t</span> txt _dmarc.free.gd @8.8.8.8<span class="token function">nslookup</span> <span class="token parameter variable">-type</span><span class="token operator">=</span>txt _dmarc.free.gd <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><p>为了更好的体验，避免在使用网页版或客户端时出现不受信任证书的情况，咱们需要使用自己的可受信任的证书，Let’s Encrypt 证书就是非常不错的可受信任免费证书。</p><p>证书的申请不再说明，使用 acme.sh 以 DNS 方式验证即可，证书申请后执行命令完成证书替换：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acme.sh <span class="token parameter variable">--installcert</span> <span class="token parameter variable">-d</span> mail.free.gd --key-file /etc/ssl/private/iRedMail.key --fullchain-file /etc/ssl/certs/iRedMail.crt <span class="token parameter variable">--reloadcmd</span> <span class="token string">"service postfix reload;service dovecot reload;service nginx reload"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="邮件测试"><a href="#邮件测试" class="headerlink" title="邮件测试"></a>邮件测试</h2><p>当全部完成，且解析全部生效后，咱们应该进行一次测试，检查自己的邮件服务器是否达到标准，避免被接收方转入垃圾邮件。</p><p>打开 <a href="http://www.mail-tester.com/">https://www.mail-tester.com</a> 网站，会得到一个邮箱地址，使用自己的邮件服务器随意发送一封邮件到此地址，并查看邮件得分即可。</p><p>可以看到，这里测试了得到 10 分的满分，这样就可以保证邮件发送后不会进入对方的垃圾邮箱内，非常完美！</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
            <tag> iRedMail </tag>
            
            <tag> 邮件服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxmox中FreeBSD虚拟机IPv6配置方式</title>
      <link href="//proxmox-freebsd-ipv6.html"/>
      <url>//proxmox-freebsd-ipv6.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>之前购买了一台独立服务器，在其上安装了及其方便的 Proxmox，这样就可以在服务器上通过安装一台台独立的虚拟机来运行不同的程序，不过由于服务器只有一个 IPv4 和一个 IPv6&#x2F;64 网段，所以若想让虚拟机达到能够外网直接访问，那就只有两种方式，一种是通过 NAT 端口转换，一种就是开启独立 IPv6 虚拟机，显然，综合考虑后，IPv6 虚拟机是最完美的方式！</p><p>但在构建最中意的 FreeBSD 时，却发现 IPv6 地址无论如何都配置不上去，甚至连网关都无法 PING 通，这就尴尬了，这也导致一直只能使用 来运行自己的网站程序，无法使用 FreeBSD 真是非常痛苦，通过不停尝试后，终于发现了问题，本文也将讨论如何在 Proxmox 中开启一台同时支持 IPv4 私网与 IPv6 公网的虚拟机。</p><span id="more"></span><h2 id="Proxmox-配置"><a href="#Proxmox-配置" class="headerlink" title="Proxmox 配置"></a>Proxmox 配置</h2><p>其实 Proxmox 的配置不太想多说，因为在 Hetzner服务器内安装Proxmox并开通IPv6小鸡 一文中已经讲过，而非 Hetzner 其实也差不多，这里还是给个配置文件吧，假设独立 IPv4 地址为 123.123.123.123，网关地址 123.123.123.122，IPv6 网段为 2606:4700:4700::&#x2F;64，网关地址为 2606:4700:4700::1</p><pre class="line-numbers language-none"><code class="language-none"># &#x2F;etc&#x2F;network&#x2F;interfacesauto loiface lo inet loopbackallow-hotplug eth0iface eth0 inet dhcpauto eth1iface eth1 inet manualup sysctl -pup ip route add 123.123.123.123&#x2F;30 dev eth1auto vmbr0iface vmbr0 inet staticaddress 123.123.123.123netmask 255.255.255.252gateway 123.123.123.122bridge_ports eth1bridge_stp offbridge_fd 0iface vmbr0 inet6 staticaddress 2606:4700:4700::abc:a01netmask 128gateway 2606:4700:4700::1auto vmbr1iface vmbr1 inet staticaddress 10.10.10.1netmask 255.255.255.0bridge_ports nonebridge_stp offbridge_fd 0post-up iptables -t nat -A POSTROUTING -s &#39;10.10.10.0&#x2F;24&#39; -o vmbr0 -j MASQUERADEpost-down iptables -t nat -D POSTROUTING -s &#39;10.10.10.0&#x2F;24&#39; -o vmbr0 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 &#x2F;etc&#x2F;sysctl.conf 中配置：</p><pre class="line-numbers language-none"><code class="language-none">net.ipv4.ip_forward&#x3D;1net.ipv6.conf.all.forwarding&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启服务器或网络即可。</p><h2 id="创建-FreeBSD-虚拟机"><a href="#创建-FreeBSD-虚拟机" class="headerlink" title="创建 FreeBSD 虚拟机"></a>创建 FreeBSD 虚拟机</h2><p>FreeBSD 是属于类 Unix 系统，并不是 Linux 系统，所以单纯的 LXC 是无法开启的，这里需要创建 KVM 虚拟机，将 FreeBSD 安装镜像下载到服务器 &#x2F;var&#x2F;lib&#x2F;vz&#x2F;template&#x2F;iso&#x2F; 中，随后创建虚拟机并选择该安装镜像。</p><p>硬盘总线设备建议选择 “VirtIO Block”</p><p>网络模型选择 “VirtIO (半虚拟化)”，桥接选择 “vmbr0”，这是使用 IPv6 的，接着再添加一张网卡，桥接选择 “vmbr1”，这是用于私网 IPv4 的。</p><p>添加完成后开机，并安装正常流程安装。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>当 FreeBSD 安装完成后，我们需要对网络进行配置，这就是本文重点要说的内容，因为在这里尝试了很长时间，最后终于搞定了！</p><p>使用 ee 打开 &#x2F;etc&#x2F;rc.conf，并配置网络，这里设定我的 IPv6 地址为 2606:4700:4700::abc:a02，网关为 2606:4700:4700::abc:a01，私网地址为 10.10.10.2，网关 10.10.10.1，而对应的 vmbr0 网卡为 vtnet0，而 vmbr1 网卡为 vtnet1</p><pre class="line-numbers language-none"><code class="language-none">ifconfig_vtnet0&#x3D;&quot;&quot;ifconfig_vtnet0_ipv6&#x3D;&quot;inet6 2606:4700:4700::abc:a02&#x2F;64&quot;ipv6_default&#x3D;&quot;2606:4700:4700::abc:a01&quot;ifconfig_vtnet1&#x3D;&quot;inet 10.10.10.2 netmask 255.255.255.0&quot;defaultrouter&#x3D;&quot;10.10.10.1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成后重启网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/netstart restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在说下到底是哪里遇到了坑，其实这也是自己的问题，源于独服配置的 IPv6 前缀是 128，在开启 LXC 虚拟机时，只需要配置 IPv6&#x2F;128，然后网关设置为独服的 IPv6 地址即可，但在 FreeBSD 中不行。</p><p>最终想了下，其实很简单，128 在 IPv6 中其实仅仅表示了一个 IPv6 地址，这样的话两个 IPv6 并不属于同一个网段，那当配置网关时，肯定是无法跨网段连接的，而当更改为 &#x2F;64 后，两个地址就都属于一个网段中，那就没问题了，所以还是对于 IPv6 不太了解造成的问题。</p><p>其实这样如果设置为 &#x2F;120 也是可以的，主要就是将两个地址都归属于一个网段中就可正常连通。</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeBSD </tag>
            
            <tag> IPv6 </tag>
            
            <tag> Proxmox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装小说精品屋Plus</title>
      <link href="//linux-install-novel-plus.html"/>
      <url>//linux-install-novel-plus.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><a href="https://github.com/201206030/novel-plus">小说精品屋Plus</a> 是一款 Java 语言编写的在线小说阅读系统，具有极快的采集速度以及简便的搭建方式，本文将以 Ubuntu 为基础，对 小说精品屋Plus 进行搭建。</p><p>演示地址：<del><a href="https://book.free.gd/">https://book.free.gd</a></del></p><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次选用的操作系统为 Ubuntu 20.04，系统安装完成后，需要安装 MySQL 以及 JDK8，MySQL 的安装不多重复，这里简单说下 JDK 的安装。</p><p>网上很多人介绍 JDK 安装时都是直接在官网下载，但目前官网已经启用了登录下载模式，这样极不方便，本次安装选择使用 apt 安装，安装命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着就是创建数据库以及用户：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> book <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> book<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'book'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'bookpasswd'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就创建了一个数据库 book，同时创建了一个用户 book，密码为 bookpasswd</p><h2 id="程序更改"><a href="#程序更改" class="headerlink" title="程序更改"></a>程序更改</h2><p>将程序包下载到服务器并解压：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/201206030/novel-plus/releases/download/v3.0.2/novel-plus-install-v3.0.2.zip <span class="token parameter variable">-O</span> ~/novel.zip<span class="token function">unzip</span> novel.zip<span class="token builtin class-name">cd</span> ~/novel-plus-install-v3.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解压后会出现四个目录，分别是：</p><blockquote><p>novel-admin：程序后台（个人觉得没什么用）<br>novel-crawl：爬虫程序<br>novel-front：程序前台<br>sql：数据库文件</p></blockquote><p>将 sql 文件导入数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-ubook</span> <span class="token parameter variable">-pbookpasswd</span> book <span class="token operator">&lt;</span> sql/novel_plus.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着修改每个文件夹下的 .yml 文件，主要是修改数据库连接信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/novel_plus<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>username: root<br>password: root<br>127.0.0.1:3306 修改为自己的 MySQL 地址与端口<br>novel_plus 修改为自己的数据库名称<br>username 为数据库连接用户名<br>password 为数据库连接密码</p></blockquote><p>同时关注下各程序所运行的端口号：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#端口号</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> 80xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前台文件夹的 yml 文件中，有一项可以修改图片的保存方式：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pic</span><span class="token punctuation">:</span>  <span class="token key atrule">save</span><span class="token punctuation">:</span>    <span class="token comment">#图片保存方式, 1不保存，使用网络图片 ，2本地保存</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token comment">#图片保存路径</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/pic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爬虫文件夹的 yml 文件中，有一项是修改爬虫系统管理员信息的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#登录用户名密码</span><span class="token key atrule">admin</span><span class="token punctuation">:</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> admin  <span class="token key atrule">password</span><span class="token punctuation">:</span> admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><p>当完成修改后，即可运行程序，所有程序都是分别运行，互不干扰却又互相依赖。</p><p>需要全部运行则依次执行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/novel-plus-install-v3.0.2/novel-frontsetsid <span class="token function">java</span> <span class="token parameter variable">-jar</span> novel-front-3.0.2.jar<span class="token builtin class-name">cd</span> ~/novel-plus-install-v3.0.2/novel-crawlsetsid <span class="token function">java</span> <span class="token parameter variable">-jar</span> novel-crawl-3.0.2.jar<span class="token builtin class-name">cd</span> ~/novel-plus-install-v3.0.2/novel-adminsetsid <span class="token function">java</span> <span class="token parameter variable">-jar</span> novel-admin-2.11.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，根据 程序运行 文件中各程序的运行端口号，即可通过 <a href="http://ip:port/">http://ip:port/</a> 方式打开程序了！</p><h2 id="爬虫执行"><a href="#爬虫执行" class="headerlink" title="爬虫执行"></a>爬虫执行</h2><p>爬虫程序需要通过网页来开启，若未修改，一般爬虫程序的运行端口为 8083，咱们用浏览器打开 <a href="http://ip:8083，可看到一个登录界面，输入爬虫配置文件中的用户名及密码即可登录。">http://ip:8083，可看到一个登录界面，输入爬虫配置文件中的用户名及密码即可登录。</a></p><p>这里需要注意下，也不知道是本地网络问题还是什么，每次打开都必须要禁用缓存，否则不会出现源列表，若各位没有此问题，那直接启动采集即可。</p><p>爬虫启动后，稍等片刻，即可看到小说飞快的涌入网站数据库中，真心的很快！</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVM下通过DD方式安装Windows</title>
      <link href="//kvm-dd-windows.html"/>
      <url>//kvm-dd-windows.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>目前大多数 VPS 都是仅支持 Linux&#x2F;Unix 类系统，而使用 Windows 系统则需要支付一定的授权费用，这对于国内很多站长来说是很困难的，那有没有一种方法能够在不支付授权费的情况下可使用 Windows 系统呢？</p><p>本文讲解基础为 Proxmox 下安装的 KVM 虚拟机，同时也支持 Xen 等大多数全虚拟化 VPS，使用此方法，可通过直接写入硬盘的方式，将 Windows 安装到自己的 VPS 中，达到偷渡式的 Windows 使用。</p><p>注意，此方式仅可保证能够正常安装 Windows，若因偷用 Windows 而产生的版权原因等，本站概不负责！</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先准备一台 KVM 或 Xen 类型的 VPS 虚拟机，同时给 VPS 安装一个 Debian 的操作系统，使用 SSH 登录到 VPS 中，执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span> net-tools <span class="token parameter variable">-y</span><span class="token function">wget</span> qiu.sh/dd <span class="token parameter variable">-O</span> dd.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着查看下自己的网络配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/network/interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>IPv4</strong>：</p><blockquote><p>address 123.123.123.123<br>netmask 255.255.255.252<br>gateway 123.123.123.122</p></blockquote><p><strong>IPv6</strong>：</p><blockquote><p>address 2606:4700:4700:1111::2<br>netmask 64<br>gateway 2606:4700:4700:1111::1</p></blockquote><p>写入 Windows IPv4 环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> dd.sh <span class="token punctuation">\</span><span class="token parameter variable">-dd</span> <span class="token string">"https://fr1.teddyvps.com/iso/cn_windows2019_v2.gz"</span> <span class="token punctuation">\</span>--ip-addr <span class="token string">"123.123.123.123"</span> <span class="token punctuation">\</span>--ip-mask <span class="token string">"255.255.255.255"</span> <span class="token punctuation">\</span>--ip-gate <span class="token string">"123.123.123.122"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="纯IPv6环境"><a href="#纯IPv6环境" class="headerlink" title="纯IPv6环境"></a>纯IPv6环境</h2><p>因脚本会自动设置 DNS 服务器为 8.8.8.8，故此为了兼容纯 IPv6 环境，需替换为 IPv6 地址，这里选择 Cloudflare 的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s@d-i netcfg/get_nameservers string 8.8.8.8@d-i netcfg/get_nameservers string 2606:4700:4700::1111@g'</span> dd.sh<span class="token function">bash</span> dd.sh <span class="token punctuation">\</span><span class="token parameter variable">-dd</span> <span class="token string">"https://fr1.teddyvps.com/iso/cn_windows2019_v2.gz"</span> <span class="token punctuation">\</span>--ip-addr <span class="token string">"2606:4700:4700:1111::2/64"</span> <span class="token punctuation">\</span>--ip-mask <span class="token string">"2606:4700:4700:1111:ffff:ffff:ffff:ffff"</span> <span class="token punctuation">\</span>--ip-gate <span class="token string">"2606:4700:4700:1111::1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处需要注意，自己的 IPv6 掩码是多少，这个可以网上找个计算器计算下。</p><p>若在安装过程中出现“Starting up the partitioner”一直不动的情况，请勿担心，DD 的时候是不会动的，耐心等待即可，完成后系统会自动重启。</p><p>当 Windows 安装完成后，即可使用远程桌面进行连接，默认帐号：administrator，默认密码：Teddysun.com</p><p>新安装的 Windows 并没有自动激活，需手动激活，本文中的 DD 包是来自 秋水逸冰 的 Windows Server 2019 Datacenter，请自行网络搜索 KMS 激活方法</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DD </tag>
            
            <tag> KVM </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS搭建owllook小说搜索引擎</title>
      <link href="//vps-install-owllook.html"/>
      <url>//vps-install-owllook.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>摘录自项目主页说明：</p><blockquote><p>owllook 是一个基于其他搜索引擎构建的垂直小说搜索引擎，owllook目的是让阅读更简单、优雅，让每位读者都有舒适的阅读体验，如搜书、阅读、收藏、追更、推荐等功能。</p></blockquote><blockquote><p>owllook 是一款使用 Python 编写的小说搜索引擎，无论结构以及用户体验来说都挺不错，系统使用 MongoDB 及 Redis 做数据存储，且附带众多规则，搭建后可迅速开设一个简单的小说搜索引擎。</p></blockquote><p>本次，将以 CentOS 作为基础系统，一步步搭建出一个简单的小说搜索引擎。</p><p>演示可观看：<del><a href="https://read.free.gd/">https://read.free.gd</a></del></p><span id="more"></span><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>由于程序依赖于 Python、MongoDB、Redis 等，在安装之前，我们需要先解决依赖环境！</p><p>因是在 Proxmox 中进行安装，所以 MongoDB 以及 Redis 都会存放在不同的 LXC 中，避免单机压力过大问题。</p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>在 Proxmox 中开设一台 LXC 小鸡，系统选择 Ubuntu，并配置网络 10.10.10.2，开启后进入控制台开始安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> upgrade <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token parameter variable">-y</span><span class="token function">wget</span> https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.16.tgz<span class="token function">tar</span> zxf mongodb-linux-x86_64-4.0.16.tgz<span class="token function">mv</span> mongodb-linux-x86_64-4.0.16 /usr/local/mongodb<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/lib/mongodb<span class="token function">useradd</span> <span class="token parameter variable">-s</span> /sbin/nologin mongod<span class="token function">chown</span> <span class="token parameter variable">-R</span> mongod:mongod /var/lib/mongodb<span class="token function">cat</span> <span class="token operator">></span> /etc/mongod.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF# mongod.conf# for documentation of all options, see:#   http://docs.mongodb.org/manual/reference/configuration-options/# where to write logging data.systemLog:  destination: file  logAppend: true  path: <span class="token variable">$&#123;mongo_data_dir&#125;</span>/mongod.log# Where and how to store data.storage:  dbPath: <span class="token variable">$&#123;mongo_data_dir&#125;</span>  journal:    enabled: true#  engine:#  mmapv1:#  wiredTiger:# how the process runsprocessManagement:  fork: true  # fork and run in background  pidFilePath: /var/run/mongodb/mongod.pid# network interfacesnet:  port: 27017  bindIp: 0.0.0.0  unixDomainSocket:    enabled: false#security:#  authorization: enabled#operationProfiling:#replication:#sharding:EOF</span><span class="token function">cat</span> <span class="token operator">></span> /lib/systemd/system/mongod.service <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[Unit]Description=MongoDB Database ServerAfter=multi-user.targetDocumentation=https://docs.mongodb.org/manual[Service]User=mongodGroup=mongodEnvironment="OPTIONS=-f /etc/mongod.conf"EnvironmentFile=-/etc/sysconfig/mongodExecStart=/usr/local/mongodb/bin/mongod <span class="token variable">$OPTIONS</span>ExecStartPre=/bin/mkdir -p /var/run/mongodbExecStartPre=/bin/chown mongod:mongod /var/run/mongodbExecStartPre=/bin/chmod 0755 /var/run/mongodbPermissionsStartOnly=truePIDFile=/var/run/mongodb/mongod.pidType=forkingLimitFSIZE=infinityLimitCPU=infinityLimitAS=infinityLimitNOFILE=64000LimitNPROC=64000LimitMEMLOCK=infinityTasksMax=infinityTasksAccounting=false[Install]WantedBy=multi-user.targetEOF</span>systemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> mongod.servicesystemctl start mongod.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>在 Proxmox 中开设一台 Alpine 小鸡，配置网络 10.10.10.3，进入控制台执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apk updateapk upgradeapk <span class="token function">add</span> redisrc-update <span class="token function">add</span> redis default<span class="token function">service</span> redis start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>最后再开启一台小鸡，这次选用 CentOS 操作系统，配置 IPv6 为 2606:4700:xxxx::xxxx，内网地址为 10.10.10.3，其实本次选择三个不同的系统，也只是想说明下，任何东西其实在不同的系统中都可以完成对应的操作，只是取决于是否适合而已。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> updateyum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-releaseyum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">git</span> <span class="token function">curl</span> <span class="token function">screen</span> <span class="token function">bzip2</span><span class="token function">wget</span> https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh<span class="token function">chmod</span> <span class="token parameter variable">-R</span> a+x Anaconda3-2019.10-Linux-x86_64.sh./Anaconda3-2019.10-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示一次输入：Enter、yes、Enter</p><p>完成后刷新一次 Shell 并创建 Python 环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrcconda create <span class="token parameter variable">-n</span> python36 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="owllook"><a href="#owllook" class="headerlink" title="owllook"></a>owllook</h3><p>继续在 CentOS 中执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/howie6879/owllook.git /root/owllook<span class="token builtin class-name">cd</span> owllookpip <span class="token function">install</span> pipenvpipenv <span class="token function">install</span> <span class="token parameter variable">--python</span> ~/anaconda3/envs/python36/bin/python3.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若上面最后一条命令执行失败，请执行下面两条命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pipenv run pip <span class="token function">install</span> <span class="token assign-left variable">pip</span><span class="token operator">==</span><span class="token number">18.0</span>pipenv <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后，修改 &#x2F;root&#x2F;owllook&#x2F;owllook&#x2F;config&#x2F;config.py，将</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">VAL_HOST <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">'VAL_HOST'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">VAL_HOST <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">'VAL_HOST'</span><span class="token punctuation">,</span> <span class="token string">'false'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时查找所有涉及到 MongoDB 及 Redis 地址的文件，将其改为自己的 MongoDB 与 Redis 地址。</p><h3 id="开启反代"><a href="#开启反代" class="headerlink" title="开启反代"></a>开启反代</h3><p>在启动程序之前，咱们先安装一个 Nginx 对程序进行反代，否则每次访问都得加上端口号。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginxsystemctl <span class="token builtin class-name">enable</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建文件 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;owllook.conf</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server_name</span> read.free.gd</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP remote_addr</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Forproxy_add_x_forwarded_for</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto scheme</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Hosthttp_host</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-NginX-Proxy true</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> http://0.0.0.0:8001</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_redirect</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start nginx<span class="token builtin class-name">cd</span> /root/owllookpipenv run gunicorn <span class="token parameter variable">-c</span> owllook/config/gunicorn.py --worker-class sanic.worker.GunicornWorker owllook.server:app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接着打开网站看看，已经成功可用了！</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
            <tag> owllook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare各运营商推荐IP段</title>
      <link href="//cloudflare-ips.html"/>
      <url>//cloudflare-ips.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><a href="https://www.cloudflare.com/">Cloudflare</a> 是一家提供优质 CDN 的国外服务商，线路遍布全球，使用 Cloudflare 提供的 CDN 能够起到网站加速、真实 IP 地址隐藏等诸多好处，以及最受站长欢迎的 IPv6 开站，但对于国内用户来说，Cloudflare 却往往被称之为减速器的存在，究其原因大家也懂，那是否国内用户就无法有效的使用 Cloudflare 了呢？</p><p>其实也可以，Cloudflare 在使用过程中是可以通过一些特殊的方式来进行自选 IP 的，而能够自选 IP，也就能够针对特定的线路进行 IP 优化，这里提供一份针对国内三大运营商较为友好的线路，大家可以尝试下。</p><p>|—|—|—|<br>| 运营商 | Cloudflare节点 | IP段 |<br>| 移动 | 香港移动直连 | 104.19.80 - 88 |<br>| 移动 | 香港NTT | 104.20.48 |<br>| 移动 | 日本大阪府大阪 telstra.com（仅限南方移动） | 104.20.17 |<br>| 移动 | 日本东京都东京 telstra.com（仅限南方移动） | 104.23.243 |<br>| 移动 | 美国华盛顿州西雅图 level3.com（仅限南方移动） | 104.23.135 |<br>| 电信 | 荷兰北荷兰省阿姆斯特丹 level3.com | 104.27.240 |<br>| 电信 | 美洲 | 198.217.251 |<br>| 电信 | 美洲 | 172.64.0 - 15 |<br>| 电信 | 美国加利福尼亚州圣何塞 ctamericas.com | 104.16.32 - 63 |<br>| 电信 | 美国加利福尼亚州圣何塞 ctamericas.com | 104.28.18 - 29 |<br>| 联通 | 美国加利福尼亚州圣何塞 gtt.net | 104.16.32 |<br>| 联通 | 美国德克萨斯州达拉斯 gtt.net | 172.64.144 |<br>| 联通 | 美国德克萨斯州达拉斯 gtt.net | 104.23.135 |<br>| 联通 | 美国纽约州纽约 gtt.net | 172.64.112 |<br>| 联通 | 美国加利福尼亚州圣何塞 cogentco.com | 104.20.1 |<br>| 联通 | 德国黑森州法兰克福 gtt.net | 104.27.240 - 243 |</p>]]></content>
      
      
      <categories>
          
          <category> 网络收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Alpine下安装Gitea与Chevereto</title>
      <link href="//alpine-install-gitea-chevereto.html"/>
      <url>//alpine-install-gitea-chevereto.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>前面的两篇文章里分别介绍了如何在 <a href="https://www.hetzner.com/">Hetzner</a> 里安装 <a href="https://proxmox.com/">Proxmox</a>，以及如何在 VPS 里使用 <a href="https://openlitespeed.org/">OpenLiteSpeed</a> 搭建一个 <a href="https://wordpress.com/">WordPress</a> 网站。</p><p><a href="http://free.gd/hetzner-proxmox-ipv6-vps.html">Hetzner服务器内安装Proxmox并开通IPv6小鸡</a></p><p><a href="http://free.gd/openlitespeed-create-wordpress-lscache.html">使用OpenLiteSpeed创建WordPress并开启缓存</a></p><p>如果一台独立服务器，仅仅用来搭建一个 WordPress，那显然是太浪费了，为了更大程度的利用咱们的服务器，于是我决定在上面再搭建两样东西，一个是 <a href="https://gitea.com/">Gitea</a>，另一个是 <a href="https://chevereto.com/">Chevereto</a>，这俩玩意儿分别是一个类似于 <a href="https://github.com/">Github</a> 的代码管理平台，另一个是较多人使用的图床程序。</p><span id="more"></span><h2 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h2><p>Gitea 是一个功能与 Github 等类似，提供 <a href="https://git-scm.com/">Git</a> 代码托管服务，程序使用 <a href="https://go.dev/">Golang</a> 语言开发，是 <a href="https://gogs.io/">Gogs</a> 的独立分支，而为何要单独开发分支的原因，在官方网站也有说明，感兴趣的可以看看。</p><p>其实 Gitea 与 Gogs 可以说非常相似，不过由于 Gogs 仅仅是个人作品，而 Gitea 是社区作品，所以这里可乐选择了使用 Gitea，若您喜欢 Gogs，其实也是一样的。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先咱们开通一台 <a href="https://alpinelinux.org/">Alpine</a> 的 VPS，使用 Alpine 的原因就是它够轻便。</p><p>在 Alpine 中安装 Gitea 非常简单，只需要一条命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apk <span class="token function">add</span> gitea<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后启动程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> gitea start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时打开 <a href="http://ip:3000/">http://ip:3000</a> ，一般会跳转到 Gitea 的安装页面，若没有跳转，请手动输入 <a href="http://ip:3000/install">http://ip:3000/install</a> ，然后按照提示完成安装即可。</p><h3 id="反代"><a href="#反代" class="headerlink" title="反代"></a>反代</h3><p>此时，咱们的 Gitea 是可以正常运行的，但会发现访问地址是需要添加端口号 3000 的，这样非常不方便，为了能够正常访问，咱们添加一个用于反代 Gitea 的 Web 前端，这里选择了 <a href="https://caddyserver.com/">Caddy</a>，原因同样是轻便。</p><p>同样一条命令安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apk <span class="token function">add</span> caddy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着修改默认配置文件 <strong>&#x2F;etc&#x2F;caddy&#x2F;caddyfile</strong></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">g.free.gd</span></span> <span class="token punctuation">&#123;</span>    gzip    tls admin@free.gd    proxy / http://localhost:3000<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后启动程序，会自动配置 SSL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> caddy start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一切正常的话，使用 <a href="https://git.free.gd/">https://git.free.gd</a> 再次访问，发现已经可以正常访问，咱们再添加下服务自启动即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rc-update <span class="token function">add</span> caddy defaultrc-update <span class="token function">add</span> gitea default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Chevereto"><a href="#Chevereto" class="headerlink" title="Chevereto"></a>Chevereto</h2><p>Chevereto 是一款基于 <a href="https://www.php.net/">PHP</a> 语言开发的图片管理程序，程序功能强大，操作简单，深得众多网友喜欢，程序分为收费版与免费版，对于个人站长而言，免费版的功能是完全够用的，故此，本文中的 Chevereto 也一律代指免费版。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>同样开启一台 Alpine 系统的 VPS，然后使用命令安装 PHP7 及 Caddy</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apk <span class="token function">add</span> caddy php7 php7-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后根据搜索结果安装自己所需要的 PHP 扩展：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apk search php7apk <span class="token function">add</span> php7-curl php7-pdo_mysql *****<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后，咱们对 Caddy 进行配置：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">i.free.gd</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">gzip</span>    tls admin@free.gd    root /data/www    fastcgi / /data/run/php-fpm.sock php    log /data/log/access.log    errors /data/log/caddy.log    rewrite</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">to</span></span> <span class="token punctuation">&#123;</span>path<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>path<span class="token punctuation">&#125;</span>/ /index.php?<span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再配置 <strong>&#x2F;etc&#x2F;php7&#x2F;php-fpm.conf</strong></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">global</span><span class="token punctuation">]</span></span><span class="token key attr-name">pid</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/run/php-fpm.pid</span><span class="token key attr-name">error_log</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/log/php-fpm.log</span><span class="token key attr-name">log_level</span> <span class="token punctuation">=</span> <span class="token value attr-value">warning</span><span class="token key attr-name">emergency_restart_threshold</span> <span class="token punctuation">=</span> <span class="token value attr-value">30</span><span class="token key attr-name">emergency_restart_interval</span> <span class="token punctuation">=</span> <span class="token value attr-value">60s</span><span class="token key attr-name">process_control_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">5s</span><span class="token key attr-name">daemonize</span> <span class="token punctuation">=</span> <span class="token value attr-value">yes</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">caddy</span><span class="token punctuation">]</span></span><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/run/php-fpm.sock</span><span class="token key attr-name">listen.backlog</span> <span class="token punctuation">=</span> <span class="token value attr-value">-1</span><span class="token key attr-name">listen.allowed_clients</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1</span><span class="token key attr-name">listen.owner</span> <span class="token punctuation">=</span> <span class="token value attr-value">caddy</span><span class="token key attr-name">listen.group</span> <span class="token punctuation">=</span> <span class="token value attr-value">caddy</span><span class="token key attr-name">listen.mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">0666</span><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">caddy</span><span class="token key attr-name">group</span> <span class="token punctuation">=</span> <span class="token value attr-value">caddy</span><span class="token key attr-name">pm</span> <span class="token punctuation">=</span> <span class="token value attr-value">dynamic</span><span class="token key attr-name">pm.max_children</span> <span class="token punctuation">=</span> <span class="token value attr-value">30</span><span class="token key attr-name">pm.start_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span><span class="token key attr-name">pm.min_spare_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span><span class="token key attr-name">pm.max_spare_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">50</span><span class="token key attr-name">pm.max_requests</span> <span class="token punctuation">=</span> <span class="token value attr-value">2048</span><span class="token key attr-name">pm.process_idle_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">10s</span><span class="token key attr-name">request_terminate_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">120</span><span class="token key attr-name">request_slowlog_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span><span class="token key attr-name">slowlog</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/log/php-slow.log</span><span class="token key attr-name">rlimit_files</span> <span class="token punctuation">=</span> <span class="token value attr-value">51200</span><span class="token key attr-name">rlimit_core</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span><span class="token key attr-name">catch_workers_output</span> <span class="token punctuation">=</span> <span class="token value attr-value">yes</span><span class="token key attr-name">env[PATH]</span> <span class="token punctuation">=</span> <span class="token value attr-value">/usr/local/bin:/usr/bin:/bin</span><span class="token key attr-name">env[TMP]</span> <span class="token punctuation">=</span> <span class="token value attr-value">/tmp</span><span class="token key attr-name">env[TMPDIR]</span> <span class="token punctuation">=</span> <span class="token value attr-value">/tmp</span><span class="token key attr-name">env[TEMP]</span> <span class="token punctuation">=</span> <span class="token value attr-value">/tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/www<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/run<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/log<span class="token function">wget</span> --no-check-certificate https://github.com/Chevereto/installer/raw/master/installer.php <span class="token parameter variable">-O</span> /data/www/installer.php<span class="token function">chown</span> <span class="token parameter variable">-R</span> caddy:caddy /data<span class="token function">service</span> php-fpm7 start<span class="token function">service</span> caddy startrc-update <span class="token function">add</span> php-fpm7 defaultrc-update <span class="token function">add</span> caddy default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 <a href="https://ip/installer.php">https://ip/installer.php</a> 出现安装界面，按照提示顺序安装即可。</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alpine </tag>
            
            <tag> Chevereto </tag>
            
            <tag> Gitea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用OpenLiteSpeed创建WordPress并开启缓存</title>
      <link href="/43906b11ae3c/"/>
      <url>/43906b11ae3c/</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>在上一篇文章中，康诺使用 <a href="https://proxmox.com/">Proxmox</a> 开启了虚拟机，也就是俗称的VPS。</p><p><a href="https://free.gd/hetzner-proxmox-ipv6-vps.html">Hetzner服务器内安装Proxmox并开通IPv6小鸡</a></p><p>本篇，将会在开启出来的VPS中安装配置 <a href="https://openlitespeed.org/">OpenLiteSpeed</a> 并创建一个 <a href="https://wordpress.com/">WordPress</a> 博客程序，完成网站搭建。</p><p>在搭建之前，随意介绍下今天的主角：OpenLiteSpeed</p><blockquote><p>OpenLiteSpeed 是 LiteSpeed EnterPrise 的社区版本，相较 Nginx 很多扩展如 Brotli、nginx-cache-purge 等扩展，会因为更新的不及时导致对最新Stable版本的不支持，同时也没有企业级的保障。 而 OpenLiteSpeed 的组件有官方进行主要维护和更新，提供商用企业级的体验。</p></blockquote><blockquote><p>在性能上，LiteSpeed Tech 提供的 BenchMark 中，在 WordPress、Joomla、OpenCart、ModSecurity、小型静态文件、HTTP&#x2F;2、HTTP&#x2F;3 的测试上都比 Apache HTTPD 和 Nginx 有这更好的表现，这不仅仅是跑个 Hello World 而是进行一个完整的测试。</p></blockquote><p>总的来说，OpenLiteSpeed 就是一款比 <a href="https://nginx.org/">Nginx</a>、<a href="https://www.apache.org/">Apache</a> 等更优秀的商业开源版本的 Web 服务器软件，因为是商业公司开发，所以更新、修补及性能等有较好的保障，而且 OpenLiteSpeed 包含有一个插件 LSCache，这款插件是专门针对 WordPress 进行开发设计的，优化效果相较于其他缓存插件那是高了很多的。</p><p>基于此，本文将会着重讲解 OpenLiteSpeed 的安装以及 LSCache 的使用。</p><span id="more"></span><h2 id="OpenLiteSpeed-安装"><a href="#OpenLiteSpeed-安装" class="headerlink" title="OpenLiteSpeed 安装"></a>OpenLiteSpeed 安装</h2><p>OpenLiteSpeed 有好几种方式，最简单的有官方的一键包，其他的还可以自己编译等等，这里就讲解一键包以及 <a href="https://www.freebsd.org/">FreeBSD</a> 下编译两种方式吧。</p><h2 id="官方一键包"><a href="#官方一键包" class="headerlink" title="官方一键包"></a>官方一键包</h2><p>直接输入命令进行安装配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> --no-check-certificate https://github.com/litespeedtech/ols1clk/raw/master/ols1clk.sh<span class="token function">bash</span> ols1clk.sh <span class="token parameter variable">--adminpassword</span> free.gd <span class="token parameter variable">--email</span> admin@free.gd <span class="token parameter variable">--lsphp</span> <span class="token number">81</span> <span class="token parameter variable">--listenport</span> <span class="token number">80</span> <span class="token parameter variable">--ssllistenport</span> <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后，将会自动为您安装 OpenLiteSpeed，并配置管理员密码为 free.gd，管理员邮箱为 <a href="mailto:&#97;&#100;&#x6d;&#105;&#110;&#64;&#x66;&#x72;&#x65;&#101;&#x2e;&#103;&#100;">&#97;&#100;&#x6d;&#105;&#110;&#64;&#x66;&#x72;&#x65;&#101;&#x2e;&#103;&#100;</a>，以及安装 lsphp81，监听 80 及 443 两个 Web 端口，由于康诺在服务器上单独开设了一台小鸡作为 MySQL 数据库服务器，所以这里没有安装 MySQL，需要安装的可以看看下方的完整命令列表：</p><blockquote><p>–adminpassword [PASSWORD] To set the WebAdmin password for OpenLiteSpeed instead of using a random one.<br>–email [EMAIL] To set the administrator email.<br>–lsphp [VERSION] To set the LSPHP version, such as 80. We currently support versions ‘71 72 73 74 80 81’.<br>–mariadbver [VERSION] To set MariaDB version, such as 10.9. We currently support versions ‘10.2 10.3 …10.9’.<br>–wordpress To install WordPress. You will still need to complete the WordPress setup by browser<br>–wordpressplus [SITEDOMAIN] To install, set up, and configure WordPress, also LSCache will be enabled<br>–wordpresspath [WP_PATH] To specify a location for the new WordPress installation or use for an existing WordPress.<br>–dbrootpassword [PASSWORD] To set the database root password instead of using a random one.<br>–dbname [DATABASENAME] To set the database name to be used by WordPress.<br>–dbuser [DBUSERNAME] To set the WordPress username in the database.<br>–dbpassword [PASSWORD] To set the WordPress table password in MySQL instead of using a random one.<br>–prefix [PREFIXNAME] To set the WordPress table prefix.<br>–listenport [PORT] To set the HTTP server listener port, default is 80.<br>–ssllistenport [PORT] To set the HTTPS server listener port, default is 443.<br>–wpuser [WP_USER] To set the WordPress admin user for WordPress dashboard login. Default value is wpuser.<br>–wppassword [PASSWORD] To set the WordPress admin user password for WordPress dashboard login.<br>–wplang [WP_LANGUAGE] To set the WordPress language. Default value is “en_US” for English.<br>–sitetitle [WP_TITLE] To set the WordPress site title. Default value is mySite.<br>–pure-mariadb To install OpenLiteSpeed and MariaDB.<br>–with-mysql To install OpenLiteSpeed&#x2F;App with MySQL.<br>–proxy-r To set a proxy with rewrite type.<br>–proxy-c To set a proxy with config type.<br>–uninstall To uninstall OpenLiteSpeed and remove installation directory.<br>–purgeall To uninstall OpenLiteSpeed, remove installation directory, and purge all data in MySQL.<br>–quiet To use quiet mode, won’t prompt to input anything.<br>–version To display the script version information.<br>–verbose To display more messages during the installation.<br>–update To update ols1clk from github.<br>–help To display help messages.</p></blockquote><h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><p>这里使用 FreeBSD 作为解说，描述下在 FreeBSD 下如何进行 OpenLiteSpeed 的源码编译。</p><p>首先更新 ports：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">portsnap fetch extract<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着依次安装以下组件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/ports/devel/pcre<span class="token punctuation">;</span> <span class="token function">make</span> <span class="token function">install</span> clean<span class="token punctuation">;</span> rehash<span class="token punctuation">;</span><span class="token builtin class-name">cd</span> /usr/ports/devel/rcs<span class="token punctuation">;</span> <span class="token function">make</span> <span class="token function">install</span> clean<span class="token punctuation">;</span> rehash<span class="token punctuation">;</span><span class="token builtin class-name">cd</span> /usr/ports/dns/udns<span class="token punctuation">;</span> <span class="token function">make</span> <span class="token function">install</span> clean<span class="token punctuation">;</span> rehash<span class="token punctuation">;</span><span class="token builtin class-name">cd</span> /usr/ports/textproc/expat2<span class="token punctuation">;</span> <span class="token function">make</span> <span class="token function">install</span> clean<span class="token punctuation">;</span> rehash<span class="token punctuation">;</span><span class="token builtin class-name">cd</span> /usr/ports/security/openssl<span class="token punctuation">;</span> <span class="token function">make</span> <span class="token function">install</span> clean<span class="token punctuation">;</span> rehash<span class="token punctuation">;</span><span class="token builtin class-name">cd</span> /usr/ports/lang/perl5.26<span class="token punctuation">;</span> <span class="token function">make</span> <span class="token function">install</span> clean<span class="token punctuation">;</span> rehash<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载 OpenLiteSpeed 源码到本地，解压并安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fetch https://openlitespeed.org/packages/openlitespeed-1.7.16.src.tgz<span class="token function">tar</span> zxf openlitespeed-1.7.16.src.tgz<span class="token builtin class-name">cd</span> openlitespeed-1.7.16./configure --with-pcre<span class="token operator">=</span>/usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="OpenLiteSpeed-配置"><a href="#OpenLiteSpeed-配置" class="headerlink" title="OpenLiteSpeed 配置"></a>OpenLiteSpeed 配置</h2><p>OpenLiteSpeed 已经安装完成，接着，咱们输入 <a href="https://ip:7080/">https://ip:7080</a> 访问 OpenLiteSpeed 控制面板（没错，自带了控制面板），可却发现打不开，什么情况？</p><p>这是由于 OpenLiteSpeed 默认监听 IPv4，而不监听 IPv6 的原因，这就导致咱们直接使用 IPv6 无法访问，此时登录服务器，并修改 &#x2F;usr&#x2F;local&#x2F;lsws&#x2F;admin&#x2F;conf&#x2F;admin_config.conf 文件，将其中的 *:7080 修改为 [ANY]:7080，然后执行重启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/lsws/bin/lswsctrl restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次打开控制面板，并输入帐号名称 admin 及自己配置或程序随机生成的密码登录控制面板。</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/01.6m3ytp2mzn.avif" alt="01"></p><p>登录后，在控制面板右上角可以修改语言为中文。</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/02.8dwxollzvn.avif" alt="02"></p><p>点击左侧的 虚拟主机，并点击 “+” 添加一个虚拟主机并填写网站基本信息。</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/03.1e8o6p9n1f.avif" alt="03"></p><p>点击保存图标保存，会出现 file &#x2F;usr&#x2F;local&#x2F;lsws&#x2F;conf&#x2F;vhosts&#x2F;free.gd&#x2F;vhconf.conf does not exist. CLICK TO CREATE 这样的一段提示，咱们点击 CLICK TO CREATE 创建配置文件后再次提交即可，接着按照提示一步一步的完成即可。</p><p>配置完成后发现依然无法打开网站，这是因为还没有将网站添加到监听的端口中。</p><p>点击左侧 监听器，可以看到后台已经默认配置了两个监听接口，一个是 HTTP 的 80 端口，一个是 HTTPS 的 443 端口。</p><p>接下来，依次点击 放大镜，并点击 “+” 将自己刚才创建的虚拟主机加入到接口中，记住两个端口都要添加！</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/04.491cchott0.avif" alt="04"></p><p>此时，咱们网站也创建完成了，到 MySQL 服务器中创建一个数据库及专属用户，接着在网站服务器中执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /srv/www/free.gd<span class="token builtin class-name">cd</span> /srv/www/free.gdfetch https://WordPress.org/latest.tar.gz<span class="token function">tar</span> zxf latest.tar.gz<span class="token function">rm</span> <span class="token parameter variable">-f</span> latest.tar.gz<span class="token function">mv</span> WordPress public_html<span class="token function">chown</span> <span class="token parameter variable">-R</span> nobody:nogroup /srv/www/free.d<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">755</span> /srv/www/free.gd/usr/local/lsws/bin/lswsctrl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问域名开始安装 WordPress。</p><h2 id="LSCache配置"><a href="#LSCache配置" class="headerlink" title="LSCache配置"></a>LSCache配置</h2><p>在 WordPress 后台安装插件 LiteSpeed Cache 并激活，根据自己的需要进行自定义配置，这里最主要记得开启 对象缓存 与 即时点击，其余自行决定。</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/05.1e8o6p9n1g.avif" alt="05"></p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/06.60ub7e86p0.avif" alt="06"></p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/07.45r0drnqd.avif" alt="07"></p><p>完成以上步骤后，已经基本OK，不过，为了更好的缓存效果，咱们回到 OpenLiteSpeed 控制面板，进入刚才添加的虚拟主机中，在 资源集 下依次添加几条静态规则。</p><p><strong>第一条</strong></p><blockquote><p>URI: &#x2F;wp-content&#x2F;cache&#x2F;js&#x2F;<br>位置: $DOC_ROOT&#x2F;wp-content&#x2F;cache&#x2F;js&#x2F;<br>可访问: yes<br>启用过期: yes<br>按类型过期: application&#x2F;x-javascript&#x3D;A15552000,<br>text&#x2F;javascript&#x3D;A15552000, application&#x2F;javascript&#x3D;A15552000<br>头部操作:<br>unset Cache-control set Cache-control public, max-age&#x3D;15552000 set<br>Access-Control-Allow-Origin: *</p></blockquote><p><strong>第二条</strong></p><blockquote><p>URI: &#x2F;wp-content&#x2F;cache&#x2F;css&#x2F;<br>位置: $DOC_ROOT&#x2F;wp-content&#x2F;cache&#x2F;css&#x2F;<br>可访问: yes<br>启用过期: yes<br>按类型过期: text&#x2F;css&#x3D;A15552000<br>头部操作:<br>unset Cache-control<br>set Cache-control public, max-age&#x3D;15552000<br>set Access-Control-Allow-Origin: *</p></blockquote><p><strong>第三条</strong></p><blockquote><p>URI: exp:^.*(gif|ico|jpeg|jpg|png|webp|woff|woff2|fon|fot|ttf)位置:DOC_ROOT&#x2F;$0<br>可访问: yes<br>启用过期: yes<br>按类型过期: text&#x2F;css&#x3D;A15552000, image&#x2F;gif&#x3D;A15552000, image&#x2F;x-icon&#x3D;A15552000, image&#x2F;jpeg&#x3D;A15552000, application&#x2F;x-javascript&#x3D;A15552000, text&#x2F;javascript&#x3D;A15552000, application&#x2F;javascript&#x3D;A15552000, image&#x2F;png&#x3D;A15552000, image&#x2F;webp&#x3D;A15552000, font&#x2F;ttf&#x3D;A15552000, font&#x2F;woff&#x3D;A15552000, font&#x2F;woff2&#x3D;A15552000, application&#x2F;x-font-ttf&#x3D;A15552000, application&#x2F;x-font-woff&#x3D;A15552000, application&#x2F;font-woff&#x3D;A15552000, application&#x2F;font-woff2&#x3D;A15552000<br>头部操作:<br>unset Cache-control<br>set Cache-control public, max-age&#x3D;15552000<br>set Access-Control-Allow-Origin: *</p></blockquote><p>完成后效果如图</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/08.m52nyl0l.avif" alt="08"></p><p>完成后再次重启即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/lsws/bin/lswsctrl restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> LSCache </tag>
            
            <tag> OpenLiteSpeed </tag>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hetzner服务器内安装Proxmox并开通IPv6小鸡</title>
      <link href="//hetzner-proxmox-ipv6-vps.html"/>
      <url>//hetzner-proxmox-ipv6-vps.html</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><del><strong>内容已失效，因 Hetzner 原因，容易造成 MAC 警告导致封号</strong></del></p><p><a href="https://www.hetzner.com/">Hetzner</a> 是一家提供廉价服务器的德国供应商，独立服务器价格低廉，性价比高，受到很多网友的喜爱。</p><p>本站也是建立在 <a href="https://www.hetzner.com/">Hetzner</a> 中，使用 <a href="https://proxmox.com/">Proxmox</a> 进行 VPS 管理，再搭配 <a href="https://www.cloudflare.com/">Cloudflare</a> 进行 <strong>CDN</strong> 加速。</p><p>本文主要介绍如何在 <a href="https://www.hetzner.com/">Hetzner</a> 中构建 <a href="https://proxmox.com/">Proxmox</a>，并进行 <strong>VPS</strong> 开设，图文内容较多，请耐心阅读。</p><span id="more"></span><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>在购买并开通了 <a href="https://www.hetzner.com/">Hetzner</a> 后，我们将得到一个管理帐号及密码，然后登录管理系统 <a href="https://robot.hetzner.com/">Robot</a>，登录后可查看自己的服务器信息。</p><p>点击 <strong>Rescue</strong> 进入恢复模式配置界面进行配置，并记下配置后给的 SSH 密码</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/01.13ludhnw31.avif" alt="01"></p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/02.b8yvr7act.avif" alt="02"></p><p>完成后以此点击 <strong>Reset —— Execute an automatic hardware reset</strong>，服务器会重启，等待能够 <strong>Ping</strong> 通后即可登录服务器</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/03.ic6r6tfsd.avif" alt="03"></p><p>使用 <strong>SSH</strong> 登录服务器，并输入 <strong>installimage</strong> 安装系统</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/04.8l05jz1mi6.avif" alt="04"></p><p>选择安装 <a href="https://www.debian.org/">Debian</a> 进入，并安装最新版，选择完成后会要求配置硬件数据。</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/05.2oblcyl3ji.avif" alt="05"></p><p>我这里设置为 <strong>raid 0</strong>，最大化应用硬盘</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/06.4jo65kxj5a.avif" alt="06"></p><p>接着配置分区，按自己需求进行配置即可</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/07.67xj2rntbj.avif" alt="07"></p><p>配置完成后按下 <strong>F10</strong> 确认，随后一路确定，系统会自动为服务器进行安装配置</p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/08.6m3ytmw46n.avif" alt="08"></p><p><img src="https://coolbie.github.io/picx-images-hosting/images/2020/11/09.6pnkrcp6wf.avif" alt="09"></p><p>安装完成后键入 <strong>reboot</strong> 重启系统，重启完成后重新登录就是已安装完成的 <a href="https://www.debian.org/">Debian</a> 系统。</p><h2 id="Proxmox安装"><a href="#Proxmox安装" class="headerlink" title="Proxmox安装"></a>Proxmox安装</h2><p><a href="https://proxmox.com/">Proxmox</a> 是使用 <a href="https://www.debian.org/">Debian</a> 作为基础系统进行开发的，我们刚才已经把 <a href="https://www.debian.org/">Debian</a> 安装到了服务器中，接着就在 Debian 上构建 <a href="https://proxmox.com/">Proxmox</a> 即可。</p><p>在安装之前，我们要确认自己的主机名是否配置正确，键入命令后若看到自己的 <strong>IP</strong> 地址，就证明自己主机名是正确的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">hostname</span> --ip-address<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 <a href="https://proxmox.com/">Proxmox</a> 源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"deb http://download.proxmox.com/debian/pve buster pve-no-subscription"</span> <span class="token operator">></span> /etc/apt/sources.list.d/pve-install-repo.list<span class="token function">wget</span> http://download.proxmox.com/debian/proxmox-ve-release-6.x.gpg <span class="token parameter variable">-O</span> /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg<span class="token function">chmod</span> +r /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> full-upgrade<span class="token function">aptitude</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-y</span> purge firmware-bnx2x firmware-realtek firmware-linux firmware-linux-free firmware-linux-nonfree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装 <a href="https://proxmox.com/">Proxmox</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> proxmox-ve postfix open-iscsi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>官方推荐删除 <strong>os-prober</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> remove os-prober<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成后重启并删除 [Debian][9] 内核，更新引导</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> remove linux-image-amd64 <span class="token string">'linux-image-4.19*'</span><span class="token function">update-grub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://proxmox.com/">Proxmox</a> 配置</p><p>我们完成了 <a href="https://proxmox.com/">Proxmox</a> 的安装后，需要对 <a href="https://proxmox.com/">Proxmox</a> 进行配置，配置的主要内容在于网络配置，这是由于 <a href="https://www.hetzner.com/">Hetzner</a> 网络的特殊性所致，由于 <a href="https://www.hetzner.com/">Hetzner</a> 所用网络是将 <strong>IP</strong> 与 <strong>MAC</strong> 地址进行绑定，所以在配置时与其他服务器稍显不同，这里一定要注意。</p><p>打开网络配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/network/interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对网络进行配置</p><blockquote><h3 id="Hetzner-Online-GmbH-installimage-source-etc-network-interfaces-d-auto-lo-iface-lo-inet-loopback-iface-lo"><a href="#Hetzner-Online-GmbH-installimage-source-etc-network-interfaces-d-auto-lo-iface-lo-inet-loopback-iface-lo" class="headerlink" title="Hetzner Online GmbH installimage source &#x2F;etc&#x2F;network&#x2F;interfaces.d&#x2F;* auto lo iface lo inet loopback iface lo"></a>Hetzner Online GmbH installimage source &#x2F;etc&#x2F;network&#x2F;interfaces.d&#x2F;* auto lo iface lo inet loopback iface lo</h3><p>inet6 loopback auto enp2s0 iface enp2s0 inet manual up sysctl -p up ip<br>route add 136.xxx.xxx.2&#x2F;32 dev enp2s0 auto vmbr0 iface vmbr0 inet<br>static address 136.xxx.xxx.1 netmask 255.255.255.224 gateway<br>136.xxx.xxx.3 bridge_ports enp2s0 bridge_stp off bridge_fd 0 iface vmbr0 inet6 static address 2a01:xxx:xxx:xxx::xxx:a01 netmask 120<br>gateway fe80::1 auto vmbr1 iface vmbr1 inet static address 10.10.10.1<br>netmask 255.255.255.0 bridge_ports none bridge_stp off bridge_fd 0<br>post-up iptables -t nat -A POSTROUTING -s ‘10.10.10.0&#x2F;24’ -o vmbr0 -j<br>MASQUERADE post-down iptables -t nat -D POSTROUTING -s ‘10.10.10.0&#x2F;24’<br>-o vmbr0 -j MASQUERADE</p></blockquote><p>这里需要注意几个地方：</p><blockquote><ol><li>enp2s0代表服务器的网卡</li><li>136.xxx.xxx.2&#x2F;32是额外独立IP地址，有多少加多少</li><li>136.xxx.xxx.1是服务器主IP地址，不要配置错误</li><li>136.xxx.xxx.3是服务器主IP地址的网关地址</li><li>2a01:xxx:xxx:xxx::xxx:a01是Hetzner给我的IPv6地址</li><li>10.10.10.1是为了内网互通配置的内网地址</li></ol></blockquote><p>这里稍微做一下解释：</p><p>首先咱们为服务器网卡建立一个桥接网卡，并命名为 <strong>vmbr0</strong>，然后为桥接网卡配置对应的 <strong>IP</strong> 信息，其中 <strong>IPv4</strong> 地址就是服务器的主 <strong>IP</strong> 地址，而 <strong>IPv6</strong> 地址，<a href="https://www.hetzner.com/">Hetzner</a> 给的是一个 <strong>&#x2F;64</strong> 网段，不过康诺只给 <a href="https://proxmox.com/">Proxmox</a> 分配了一个 <strong>&#x2F;120</strong> 的地址，作为 <strong>VPS</strong> 的网关使用。</p><p>接着还建立一个新的虚拟网卡 <strong>vmbr1</strong>，这张网卡仅作为内网使用，所有数据均通过 <strong>vmbr0</strong> 进行通讯。</p><p>完成网络配置后，还需要开启 <strong>IP</strong> 转发功能，否则刚才的配置毫无意义，而一般的 <strong>IP</strong> 转发都是配置在 <strong>sysctl.conf</strong> 文件中，但 <a href="https://www.hetzner.com/">Hetzner</a> 的是配置在这个文件：**&#x2F;etc&#x2F;sysctl.d&#x2F;99-hetzner.conf**</p><p>在文件最后加入内容</p><blockquote><p>net.ipv4.ip_forward&#x3D;1<br>net.ipv6.conf.all.forwarding&#x3D;1</p></blockquote><p>完成后再次重启系统</p><p><strong>VPS</strong> 开设</p><p>此时，咱们可以通过 <a href="https://proxmox.com/">Proxmox</a> 创建 <strong>VPS</strong> 了，登录 <a href="https://proxmox.com/">Proxmox</a> 管理界面地址：<strong><a href="https://your-ip:8006/">https://your-ip:8006</a></strong></p><p>在右上角 <strong>创建虚拟机</strong> 与 <strong>创建CT</strong> 两个按钮，其中虚拟机是 <strong>KVM</strong> 类型，<strong>CT</strong> 则是 <strong>LXC</strong> 类型，简单说就是 <strong>CT</strong> 仅支持 <strong>Linux</strong>，可通过模板快速创建，<strong>KVM</strong> 需要通过 <strong>ISO</strong> 进行安装</p><p>咱们创建一个 <strong>LXC</strong> 小鸡，一路配置到网络这里，首先选择 <strong>vmbr0</strong> 网卡进行 <strong>IPv6</strong> 配置，直接配置为静态 <strong>IP</strong>，且使用 <a href="https://proxmox.com/">Proxmox</a> 的主 <strong>IPv6</strong> 作为网关地址，创建完成后，再添加一个网卡 <strong>vmbr1</strong>，并填入内网地址，此时，<strong>VPS</strong> 已经开通完成，若配置没有问题，在 <strong>VPS</strong> 内可 <strong>PING</strong> 通外网，外网也可通过 <strong>IPv6</strong> 地址访问 <strong>VPS</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hetzner </tag>
            
            <tag> IPv6 </tag>
            
            <tag> Proxmox </tag>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
